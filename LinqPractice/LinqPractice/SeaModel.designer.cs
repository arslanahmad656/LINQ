#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqPractice
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aspnet-SeaVersion_2_20170818051512")]
	public partial class SeaModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insert__MigrationHistory(__MigrationHistory instance);
    partial void Update__MigrationHistory(__MigrationHistory instance);
    partial void Delete__MigrationHistory(__MigrationHistory instance);
    partial void InsertAspNetVirtualRole(AspNetVirtualRole instance);
    partial void UpdateAspNetVirtualRole(AspNetVirtualRole instance);
    partial void DeleteAspNetVirtualRole(AspNetVirtualRole instance);
    partial void InsertAspNetAccountant(AspNetAccountant instance);
    partial void UpdateAspNetAccountant(AspNetAccountant instance);
    partial void DeleteAspNetAccountant(AspNetAccountant instance);
    partial void InsertAspNetAssessment(AspNetAssessment instance);
    partial void UpdateAspNetAssessment(AspNetAssessment instance);
    partial void DeleteAspNetAssessment(AspNetAssessment instance);
    partial void InsertAspNetAssessmentType(AspNetAssessmentType instance);
    partial void UpdateAspNetAssessmentType(AspNetAssessmentType instance);
    partial void DeleteAspNetAssessmentType(AspNetAssessmentType instance);
    partial void InsertAspNetBranch_Admin(AspNetBranch_Admin instance);
    partial void UpdateAspNetBranch_Admin(AspNetBranch_Admin instance);
    partial void DeleteAspNetBranch_Admin(AspNetBranch_Admin instance);
    partial void InsertAspNetBranch_Class(AspNetBranch_Class instance);
    partial void UpdateAspNetBranch_Class(AspNetBranch_Class instance);
    partial void DeleteAspNetBranch_Class(AspNetBranch_Class instance);
    partial void InsertAspNetBranchClass_Section(AspNetBranchClass_Section instance);
    partial void UpdateAspNetBranchClass_Section(AspNetBranchClass_Section instance);
    partial void DeleteAspNetBranchClass_Section(AspNetBranchClass_Section instance);
    partial void InsertAspNetBranch(AspNetBranch instance);
    partial void UpdateAspNetBranch(AspNetBranch instance);
    partial void DeleteAspNetBranch(AspNetBranch instance);
    partial void InsertAspNetClass_Course(AspNetClass_Course instance);
    partial void UpdateAspNetClass_Course(AspNetClass_Course instance);
    partial void DeleteAspNetClass_Course(AspNetClass_Course instance);
    partial void InsertAspNetClass(AspNetClass instance);
    partial void UpdateAspNetClass(AspNetClass instance);
    partial void DeleteAspNetClass(AspNetClass instance);
    partial void InsertAspNetCoursePackage(AspNetCoursePackage instance);
    partial void UpdateAspNetCoursePackage(AspNetCoursePackage instance);
    partial void DeleteAspNetCoursePackage(AspNetCoursePackage instance);
    partial void InsertAspNetCourse(AspNetCourse instance);
    partial void UpdateAspNetCourse(AspNetCourse instance);
    partial void DeleteAspNetCourse(AspNetCourse instance);
    partial void InsertAspNetDepartment(AspNetDepartment instance);
    partial void UpdateAspNetDepartment(AspNetDepartment instance);
    partial void DeleteAspNetDepartment(AspNetDepartment instance);
    partial void InsertAspNetEmployee(AspNetEmployee instance);
    partial void UpdateAspNetEmployee(AspNetEmployee instance);
    partial void DeleteAspNetEmployee(AspNetEmployee instance);
    partial void InsertAspNetEmployeePosition(AspNetEmployeePosition instance);
    partial void UpdateAspNetEmployeePosition(AspNetEmployeePosition instance);
    partial void DeleteAspNetEmployeePosition(AspNetEmployeePosition instance);
    partial void InsertAspNetGender(AspNetGender instance);
    partial void UpdateAspNetGender(AspNetGender instance);
    partial void DeleteAspNetGender(AspNetGender instance);
    partial void InsertAspNetLog(AspNetLog instance);
    partial void UpdateAspNetLog(AspNetLog instance);
    partial void DeleteAspNetLog(AspNetLog instance);
    partial void InsertAspNetNationality(AspNetNationality instance);
    partial void UpdateAspNetNationality(AspNetNationality instance);
    partial void DeleteAspNetNationality(AspNetNationality instance);
    partial void InsertAspNetPackage(AspNetPackage instance);
    partial void UpdateAspNetPackage(AspNetPackage instance);
    partial void DeleteAspNetPackage(AspNetPackage instance);
    partial void InsertAspNetParent(AspNetParent instance);
    partial void UpdateAspNetParent(AspNetParent instance);
    partial void DeleteAspNetParent(AspNetParent instance);
    partial void InsertAspNetReligion(AspNetReligion instance);
    partial void UpdateAspNetReligion(AspNetReligion instance);
    partial void DeleteAspNetReligion(AspNetReligion instance);
    partial void InsertAspNetRole(AspNetRole instance);
    partial void UpdateAspNetRole(AspNetRole instance);
    partial void DeleteAspNetRole(AspNetRole instance);
    partial void InsertAspNetSection(AspNetSection instance);
    partial void UpdateAspNetSection(AspNetSection instance);
    partial void DeleteAspNetSection(AspNetSection instance);
    partial void InsertAspNetSession(AspNetSession instance);
    partial void UpdateAspNetSession(AspNetSession instance);
    partial void DeleteAspNetSession(AspNetSession instance);
    partial void InsertAspNetStatus(AspNetStatus instance);
    partial void UpdateAspNetStatus(AspNetStatus instance);
    partial void DeleteAspNetStatus(AspNetStatus instance);
    partial void InsertAspNetStudent_Enrollment(AspNetStudent_Enrollment instance);
    partial void UpdateAspNetStudent_Enrollment(AspNetStudent_Enrollment instance);
    partial void DeleteAspNetStudent_Enrollment(AspNetStudent_Enrollment instance);
    partial void InsertAspNetStudent_History(AspNetStudent_History instance);
    partial void UpdateAspNetStudent_History(AspNetStudent_History instance);
    partial void DeleteAspNetStudent_History(AspNetStudent_History instance);
    partial void InsertAspNetStudentAssessment(AspNetStudentAssessment instance);
    partial void UpdateAspNetStudentAssessment(AspNetStudentAssessment instance);
    partial void DeleteAspNetStudentAssessment(AspNetStudentAssessment instance);
    partial void InsertAspNetStudent(AspNetStudent instance);
    partial void UpdateAspNetStudent(AspNetStudent instance);
    partial void DeleteAspNetStudent(AspNetStudent instance);
    partial void InsertAspNetStudentSection(AspNetStudentSection instance);
    partial void UpdateAspNetStudentSection(AspNetStudentSection instance);
    partial void DeleteAspNetStudentSection(AspNetStudentSection instance);
    partial void InsertAspNetTeacher_Enrollment(AspNetTeacher_Enrollment instance);
    partial void UpdateAspNetTeacher_Enrollment(AspNetTeacher_Enrollment instance);
    partial void DeleteAspNetTeacher_Enrollment(AspNetTeacher_Enrollment instance);
    partial void InsertAspNetTeacher_History(AspNetTeacher_History instance);
    partial void UpdateAspNetTeacher_History(AspNetTeacher_History instance);
    partial void DeleteAspNetTeacher_History(AspNetTeacher_History instance);
    partial void InsertAspNetTeacher(AspNetTeacher instance);
    partial void UpdateAspNetTeacher(AspNetTeacher instance);
    partial void DeleteAspNetTeacher(AspNetTeacher instance);
    partial void InsertAspNetTerm(AspNetTerm instance);
    partial void UpdateAspNetTerm(AspNetTerm instance);
    partial void DeleteAspNetTerm(AspNetTerm instance);
    partial void InsertAspNetUserClaim(AspNetUserClaim instance);
    partial void UpdateAspNetUserClaim(AspNetUserClaim instance);
    partial void DeleteAspNetUserClaim(AspNetUserClaim instance);
    partial void InsertAspNetUserLogin(AspNetUserLogin instance);
    partial void UpdateAspNetUserLogin(AspNetUserLogin instance);
    partial void DeleteAspNetUserLogin(AspNetUserLogin instance);
    partial void InsertAspNetUserRole(AspNetUserRole instance);
    partial void UpdateAspNetUserRole(AspNetUserRole instance);
    partial void DeleteAspNetUserRole(AspNetUserRole instance);
    partial void InsertAspNetUser(AspNetUser instance);
    partial void UpdateAspNetUser(AspNetUser instance);
    partial void DeleteAspNetUser(AspNetUser instance);
    #endregion
		
		public SeaModelDataContext() : 
				base(global::LinqPractice.Properties.Settings.Default.aspnet_SeaVersion_2_20170818051512ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SeaModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SeaModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SeaModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SeaModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<@__MigrationHistory> @__MigrationHistories
		{
			get
			{
				return this.GetTable<@__MigrationHistory>();
			}
		}
		
		public System.Data.Linq.Table<AspNetVirtualRole> AspNetVirtualRoles
		{
			get
			{
				return this.GetTable<AspNetVirtualRole>();
			}
		}
		
		public System.Data.Linq.Table<AspNetAccountant> AspNetAccountants
		{
			get
			{
				return this.GetTable<AspNetAccountant>();
			}
		}
		
		public System.Data.Linq.Table<AspNetAssessment> AspNetAssessments
		{
			get
			{
				return this.GetTable<AspNetAssessment>();
			}
		}
		
		public System.Data.Linq.Table<AspNetAssessmentType> AspNetAssessmentTypes
		{
			get
			{
				return this.GetTable<AspNetAssessmentType>();
			}
		}
		
		public System.Data.Linq.Table<AspNetBranch_Admin> AspNetBranch_Admins
		{
			get
			{
				return this.GetTable<AspNetBranch_Admin>();
			}
		}
		
		public System.Data.Linq.Table<AspNetBranch_Class> AspNetBranch_Classes
		{
			get
			{
				return this.GetTable<AspNetBranch_Class>();
			}
		}
		
		public System.Data.Linq.Table<AspNetBranchClass_Section> AspNetBranchClass_Sections
		{
			get
			{
				return this.GetTable<AspNetBranchClass_Section>();
			}
		}
		
		public System.Data.Linq.Table<AspNetBranch> AspNetBranches
		{
			get
			{
				return this.GetTable<AspNetBranch>();
			}
		}
		
		public System.Data.Linq.Table<AspNetClass_Course> AspNetClass_Courses
		{
			get
			{
				return this.GetTable<AspNetClass_Course>();
			}
		}
		
		public System.Data.Linq.Table<AspNetClass> AspNetClasses
		{
			get
			{
				return this.GetTable<AspNetClass>();
			}
		}
		
		public System.Data.Linq.Table<AspNetCoursePackage> AspNetCoursePackages
		{
			get
			{
				return this.GetTable<AspNetCoursePackage>();
			}
		}
		
		public System.Data.Linq.Table<AspNetCourse> AspNetCourses
		{
			get
			{
				return this.GetTable<AspNetCourse>();
			}
		}
		
		public System.Data.Linq.Table<AspNetDepartment> AspNetDepartments
		{
			get
			{
				return this.GetTable<AspNetDepartment>();
			}
		}
		
		public System.Data.Linq.Table<AspNetEmployee> AspNetEmployees
		{
			get
			{
				return this.GetTable<AspNetEmployee>();
			}
		}
		
		public System.Data.Linq.Table<AspNetEmployeePosition> AspNetEmployeePositions
		{
			get
			{
				return this.GetTable<AspNetEmployeePosition>();
			}
		}
		
		public System.Data.Linq.Table<AspNetGender> AspNetGenders
		{
			get
			{
				return this.GetTable<AspNetGender>();
			}
		}
		
		public System.Data.Linq.Table<AspNetLog> AspNetLogs
		{
			get
			{
				return this.GetTable<AspNetLog>();
			}
		}
		
		public System.Data.Linq.Table<AspNetNationality> AspNetNationalities
		{
			get
			{
				return this.GetTable<AspNetNationality>();
			}
		}
		
		public System.Data.Linq.Table<AspNetPackage> AspNetPackages
		{
			get
			{
				return this.GetTable<AspNetPackage>();
			}
		}
		
		public System.Data.Linq.Table<AspNetParent> AspNetParents
		{
			get
			{
				return this.GetTable<AspNetParent>();
			}
		}
		
		public System.Data.Linq.Table<AspNetReligion> AspNetReligions
		{
			get
			{
				return this.GetTable<AspNetReligion>();
			}
		}
		
		public System.Data.Linq.Table<AspNetRole> AspNetRoles
		{
			get
			{
				return this.GetTable<AspNetRole>();
			}
		}
		
		public System.Data.Linq.Table<AspNetSection> AspNetSections
		{
			get
			{
				return this.GetTable<AspNetSection>();
			}
		}
		
		public System.Data.Linq.Table<AspNetSession> AspNetSessions
		{
			get
			{
				return this.GetTable<AspNetSession>();
			}
		}
		
		public System.Data.Linq.Table<AspNetStatus> AspNetStatus
		{
			get
			{
				return this.GetTable<AspNetStatus>();
			}
		}
		
		public System.Data.Linq.Table<AspNetStudent_Enrollment> AspNetStudent_Enrollments
		{
			get
			{
				return this.GetTable<AspNetStudent_Enrollment>();
			}
		}
		
		public System.Data.Linq.Table<AspNetStudent_History> AspNetStudent_Histories
		{
			get
			{
				return this.GetTable<AspNetStudent_History>();
			}
		}
		
		public System.Data.Linq.Table<AspNetStudentAssessment> AspNetStudentAssessments
		{
			get
			{
				return this.GetTable<AspNetStudentAssessment>();
			}
		}
		
		public System.Data.Linq.Table<AspNetStudent> AspNetStudents
		{
			get
			{
				return this.GetTable<AspNetStudent>();
			}
		}
		
		public System.Data.Linq.Table<AspNetStudentSection> AspNetStudentSections
		{
			get
			{
				return this.GetTable<AspNetStudentSection>();
			}
		}
		
		public System.Data.Linq.Table<AspNetTeacher_Enrollment> AspNetTeacher_Enrollments
		{
			get
			{
				return this.GetTable<AspNetTeacher_Enrollment>();
			}
		}
		
		public System.Data.Linq.Table<AspNetTeacher_History> AspNetTeacher_Histories
		{
			get
			{
				return this.GetTable<AspNetTeacher_History>();
			}
		}
		
		public System.Data.Linq.Table<AspNetTeacher> AspNetTeachers
		{
			get
			{
				return this.GetTable<AspNetTeacher>();
			}
		}
		
		public System.Data.Linq.Table<AspNetTerm> AspNetTerms
		{
			get
			{
				return this.GetTable<AspNetTerm>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserClaim> AspNetUserClaims
		{
			get
			{
				return this.GetTable<AspNetUserClaim>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserLogin> AspNetUserLogins
		{
			get
			{
				return this.GetTable<AspNetUserLogin>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this.GetTable<AspNetUserRole>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUser> AspNetUsers
		{
			get
			{
				return this.GetTable<AspNetUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[__MigrationHistory]")]
	public partial class @__MigrationHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MigrationId;
		
		private string _ContextKey;
		
		private System.Data.Linq.Binary _Model;
		
		private string _ProductVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMigrationIdChanging(string value);
    partial void OnMigrationIdChanged();
    partial void OnContextKeyChanging(string value);
    partial void OnContextKeyChanged();
    partial void OnModelChanging(System.Data.Linq.Binary value);
    partial void OnModelChanged();
    partial void OnProductVersionChanging(string value);
    partial void OnProductVersionChanged();
    #endregion
		
		public @__MigrationHistory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MigrationId", DbType="NVarChar(150) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MigrationId
		{
			get
			{
				return this._MigrationId;
			}
			set
			{
				if ((this._MigrationId != value))
				{
					this.OnMigrationIdChanging(value);
					this.SendPropertyChanging();
					this._MigrationId = value;
					this.SendPropertyChanged("MigrationId");
					this.OnMigrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextKey", DbType="NVarChar(300) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ContextKey
		{
			get
			{
				return this._ContextKey;
			}
			set
			{
				if ((this._ContextKey != value))
				{
					this.OnContextKeyChanging(value);
					this.SendPropertyChanging();
					this._ContextKey = value;
					this.SendPropertyChanged("ContextKey");
					this.OnContextKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductVersion", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string ProductVersion
		{
			get
			{
				return this._ProductVersion;
			}
			set
			{
				if ((this._ProductVersion != value))
				{
					this.OnProductVersionChanging(value);
					this.SendPropertyChanging();
					this._ProductVersion = value;
					this.SendPropertyChanged("ProductVersion");
					this.OnProductVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetVirtualRole")]
	public partial class AspNetVirtualRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntityRef<AspNetVirtualRole> _AspNetVirtualRole2;
		
		private EntityRef<AspNetVirtualRole> _AspNetVirtualRole1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AspNetVirtualRole()
		{
			this._AspNetVirtualRole2 = default(EntityRef<AspNetVirtualRole>);
			this._AspNetVirtualRole1 = default(EntityRef<AspNetVirtualRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._AspNetVirtualRole1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetVirtualRole_AspNetVirtualRole", Storage="_AspNetVirtualRole2", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public AspNetVirtualRole AspNetVirtualRole2
		{
			get
			{
				return this._AspNetVirtualRole2.Entity;
			}
			set
			{
				AspNetVirtualRole previousValue = this._AspNetVirtualRole2.Entity;
				if (((previousValue != value) 
							|| (this._AspNetVirtualRole2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetVirtualRole2.Entity = null;
						previousValue.AspNetVirtualRole1 = null;
					}
					this._AspNetVirtualRole2.Entity = value;
					if ((value != null))
					{
						value.AspNetVirtualRole1 = this;
					}
					this.SendPropertyChanged("AspNetVirtualRole2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetVirtualRole_AspNetVirtualRole", Storage="_AspNetVirtualRole1", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public AspNetVirtualRole AspNetVirtualRole1
		{
			get
			{
				return this._AspNetVirtualRole1.Entity;
			}
			set
			{
				AspNetVirtualRole previousValue = this._AspNetVirtualRole1.Entity;
				if (((previousValue != value) 
							|| (this._AspNetVirtualRole1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetVirtualRole1.Entity = null;
						previousValue.AspNetVirtualRole2 = null;
					}
					this._AspNetVirtualRole1.Entity = value;
					if ((value != null))
					{
						value.AspNetVirtualRole2 = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("AspNetVirtualRole1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetAccountants")]
	public partial class AspNetAccountant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserId;
		
		private string _RegistrationNo;
		
		private int _EmployeeId;
		
		private EntityRef<AspNetEmployee> _AspNetEmployee;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnRegistrationNoChanging(string value);
    partial void OnRegistrationNoChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    #endregion
		
		public AspNetAccountant()
		{
			this._AspNetEmployee = default(EntityRef<AspNetEmployee>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationNo", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string RegistrationNo
		{
			get
			{
				return this._RegistrationNo;
			}
			set
			{
				if ((this._RegistrationNo != value))
				{
					this.OnRegistrationNoChanging(value);
					this.SendPropertyChanging();
					this._RegistrationNo = value;
					this.SendPropertyChanged("RegistrationNo");
					this.OnRegistrationNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL")]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._AspNetEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetEmployee_AspNetAccountant", Storage="_AspNetEmployee", ThisKey="EmployeeId", OtherKey="Id", IsForeignKey=true)]
		public AspNetEmployee AspNetEmployee
		{
			get
			{
				return this._AspNetEmployee.Entity;
			}
			set
			{
				AspNetEmployee previousValue = this._AspNetEmployee.Entity;
				if (((previousValue != value) 
							|| (this._AspNetEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetEmployee.Entity = null;
						previousValue.AspNetAccountants.Remove(this);
					}
					this._AspNetEmployee.Entity = value;
					if ((value != null))
					{
						value.AspNetAccountants.Add(this);
						this._EmployeeId = value.Id;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("AspNetEmployee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetAccountant", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetAccountants.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetAccountants.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetAssessment")]
	public partial class AspNetAssessment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _AssessmentTypeId;
		
		private string _Title;
		
		private string _Description;
		
		private string _Attachment;
		
		private int _TermId;
		
		private decimal _Weightage;
		
		private decimal _Total;
		
		private System.DateTime _DueDate;
		
		private System.DateTime _PostingDate;
		
		private EntitySet<AspNetStudentAssessment> _AspNetStudentAssessments;
		
		private EntityRef<AspNetAssessmentType> _AspNetAssessmentType;
		
		private EntityRef<AspNetTerm> _AspNetTerm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAssessmentTypeIdChanging(int value);
    partial void OnAssessmentTypeIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAttachmentChanging(string value);
    partial void OnAttachmentChanged();
    partial void OnTermIdChanging(int value);
    partial void OnTermIdChanged();
    partial void OnWeightageChanging(decimal value);
    partial void OnWeightageChanged();
    partial void OnTotalChanging(decimal value);
    partial void OnTotalChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnPostingDateChanging(System.DateTime value);
    partial void OnPostingDateChanged();
    #endregion
		
		public AspNetAssessment()
		{
			this._AspNetStudentAssessments = new EntitySet<AspNetStudentAssessment>(new Action<AspNetStudentAssessment>(this.attach_AspNetStudentAssessments), new Action<AspNetStudentAssessment>(this.detach_AspNetStudentAssessments));
			this._AspNetAssessmentType = default(EntityRef<AspNetAssessmentType>);
			this._AspNetTerm = default(EntityRef<AspNetTerm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentTypeId", DbType="Int NOT NULL")]
		public int AssessmentTypeId
		{
			get
			{
				return this._AssessmentTypeId;
			}
			set
			{
				if ((this._AssessmentTypeId != value))
				{
					if (this._AspNetAssessmentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssessmentTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AssessmentTypeId = value;
					this.SendPropertyChanged("AssessmentTypeId");
					this.OnAssessmentTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attachment", DbType="NVarChar(MAX)")]
		public string Attachment
		{
			get
			{
				return this._Attachment;
			}
			set
			{
				if ((this._Attachment != value))
				{
					this.OnAttachmentChanging(value);
					this.SendPropertyChanging();
					this._Attachment = value;
					this.SendPropertyChanged("Attachment");
					this.OnAttachmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermId", DbType="Int NOT NULL")]
		public int TermId
		{
			get
			{
				return this._TermId;
			}
			set
			{
				if ((this._TermId != value))
				{
					if (this._AspNetTerm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTermIdChanging(value);
					this.SendPropertyChanging();
					this._TermId = value;
					this.SendPropertyChanged("TermId");
					this.OnTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weightage", DbType="Decimal(5,2) NOT NULL")]
		public decimal Weightage
		{
			get
			{
				return this._Weightage;
			}
			set
			{
				if ((this._Weightage != value))
				{
					this.OnWeightageChanging(value);
					this.SendPropertyChanging();
					this._Weightage = value;
					this.SendPropertyChanged("Weightage");
					this.OnWeightageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Decimal(5,2) NOT NULL")]
		public decimal Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="DateTime NOT NULL")]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostingDate", DbType="DateTime NOT NULL")]
		public System.DateTime PostingDate
		{
			get
			{
				return this._PostingDate;
			}
			set
			{
				if ((this._PostingDate != value))
				{
					this.OnPostingDateChanging(value);
					this.SendPropertyChanging();
					this._PostingDate = value;
					this.SendPropertyChanged("PostingDate");
					this.OnPostingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetAssessment_AspNetStudentAssessment", Storage="_AspNetStudentAssessments", ThisKey="Id", OtherKey="AssessmentId")]
		public EntitySet<AspNetStudentAssessment> AspNetStudentAssessments
		{
			get
			{
				return this._AspNetStudentAssessments;
			}
			set
			{
				this._AspNetStudentAssessments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetAssessmentType_AspNetAssessment", Storage="_AspNetAssessmentType", ThisKey="AssessmentTypeId", OtherKey="Id", IsForeignKey=true)]
		public AspNetAssessmentType AspNetAssessmentType
		{
			get
			{
				return this._AspNetAssessmentType.Entity;
			}
			set
			{
				AspNetAssessmentType previousValue = this._AspNetAssessmentType.Entity;
				if (((previousValue != value) 
							|| (this._AspNetAssessmentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetAssessmentType.Entity = null;
						previousValue.AspNetAssessments.Remove(this);
					}
					this._AspNetAssessmentType.Entity = value;
					if ((value != null))
					{
						value.AspNetAssessments.Add(this);
						this._AssessmentTypeId = value.Id;
					}
					else
					{
						this._AssessmentTypeId = default(int);
					}
					this.SendPropertyChanged("AspNetAssessmentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetTerm_AspNetAssessment", Storage="_AspNetTerm", ThisKey="TermId", OtherKey="Id", IsForeignKey=true)]
		public AspNetTerm AspNetTerm
		{
			get
			{
				return this._AspNetTerm.Entity;
			}
			set
			{
				AspNetTerm previousValue = this._AspNetTerm.Entity;
				if (((previousValue != value) 
							|| (this._AspNetTerm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetTerm.Entity = null;
						previousValue.AspNetAssessments.Remove(this);
					}
					this._AspNetTerm.Entity = value;
					if ((value != null))
					{
						value.AspNetAssessments.Add(this);
						this._TermId = value.Id;
					}
					else
					{
						this._TermId = default(int);
					}
					this.SendPropertyChanged("AspNetTerm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetStudentAssessments(AspNetStudentAssessment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetAssessment = this;
		}
		
		private void detach_AspNetStudentAssessments(AspNetStudentAssessment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetAssessment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetAssessmentTypes")]
	public partial class AspNetAssessmentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private EntitySet<AspNetAssessment> _AspNetAssessments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public AspNetAssessmentType()
		{
			this._AspNetAssessments = new EntitySet<AspNetAssessment>(new Action<AspNetAssessment>(this.attach_AspNetAssessments), new Action<AspNetAssessment>(this.detach_AspNetAssessments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetAssessmentType_AspNetAssessment", Storage="_AspNetAssessments", ThisKey="Id", OtherKey="AssessmentTypeId")]
		public EntitySet<AspNetAssessment> AspNetAssessments
		{
			get
			{
				return this._AspNetAssessments;
			}
			set
			{
				this._AspNetAssessments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetAssessments(AspNetAssessment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetAssessmentType = this;
		}
		
		private void detach_AspNetAssessments(AspNetAssessment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetAssessmentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetBranch_Admins")]
	public partial class AspNetBranch_Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BranchId;
		
		private string _AdminId;
		
		private bool _IsActive;
		
		private EntityRef<AspNetBranch> _AspNetBranch;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBranchIdChanging(int value);
    partial void OnBranchIdChanged();
    partial void OnAdminIdChanging(string value);
    partial void OnAdminIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public AspNetBranch_Admin()
		{
			this._AspNetBranch = default(EntityRef<AspNetBranch>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchId", DbType="Int NOT NULL")]
		public int BranchId
		{
			get
			{
				return this._BranchId;
			}
			set
			{
				if ((this._BranchId != value))
				{
					if (this._AspNetBranch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchIdChanging(value);
					this.SendPropertyChanging();
					this._BranchId = value;
					this.SendPropertyChanged("BranchId");
					this.OnBranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string AdminId
		{
			get
			{
				return this._AdminId;
			}
			set
			{
				if ((this._AdminId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdminIdChanging(value);
					this.SendPropertyChanging();
					this._AdminId = value;
					this.SendPropertyChanged("AdminId");
					this.OnAdminIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranch_AspNetBranch_Admin", Storage="_AspNetBranch", ThisKey="BranchId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetBranch AspNetBranch
		{
			get
			{
				return this._AspNetBranch.Entity;
			}
			set
			{
				AspNetBranch previousValue = this._AspNetBranch.Entity;
				if (((previousValue != value) 
							|| (this._AspNetBranch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetBranch.Entity = null;
						previousValue.AspNetBranch_Admins.Remove(this);
					}
					this._AspNetBranch.Entity = value;
					if ((value != null))
					{
						value.AspNetBranch_Admins.Add(this);
						this._BranchId = value.Id;
					}
					else
					{
						this._BranchId = default(int);
					}
					this.SendPropertyChanged("AspNetBranch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetBranch_Admin", Storage="_AspNetUser", ThisKey="AdminId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetBranch_Admins.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetBranch_Admins.Add(this);
						this._AdminId = value.Id;
					}
					else
					{
						this._AdminId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetBranch_Class")]
	public partial class AspNetBranch_Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BranchId;
		
		private int _ClassId;
		
		private System.Nullable<int> _SessionId;
		
		private System.Nullable<int> _Capacity;
		
		private bool _IsActive;
		
		private EntitySet<AspNetBranchClass_Section> _AspNetBranchClass_Sections;
		
		private EntityRef<AspNetBranch> _AspNetBranch;
		
		private EntityRef<AspNetClass> _AspNetClass;
		
		private EntityRef<AspNetSession> _AspNetSession;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBranchIdChanging(int value);
    partial void OnBranchIdChanged();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnSessionIdChanging(System.Nullable<int> value);
    partial void OnSessionIdChanged();
    partial void OnCapacityChanging(System.Nullable<int> value);
    partial void OnCapacityChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public AspNetBranch_Class()
		{
			this._AspNetBranchClass_Sections = new EntitySet<AspNetBranchClass_Section>(new Action<AspNetBranchClass_Section>(this.attach_AspNetBranchClass_Sections), new Action<AspNetBranchClass_Section>(this.detach_AspNetBranchClass_Sections));
			this._AspNetBranch = default(EntityRef<AspNetBranch>);
			this._AspNetClass = default(EntityRef<AspNetClass>);
			this._AspNetSession = default(EntityRef<AspNetSession>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchId", DbType="Int NOT NULL")]
		public int BranchId
		{
			get
			{
				return this._BranchId;
			}
			set
			{
				if ((this._BranchId != value))
				{
					if (this._AspNetBranch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchIdChanging(value);
					this.SendPropertyChanging();
					this._BranchId = value;
					this.SendPropertyChanged("BranchId");
					this.OnBranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int NOT NULL")]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._AspNetClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int")]
		public System.Nullable<int> SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._AspNetSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int")]
		public System.Nullable<int> Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranch_Class_AspNetBranchClass_Section", Storage="_AspNetBranchClass_Sections", ThisKey="Id", OtherKey="BranchClassId")]
		public EntitySet<AspNetBranchClass_Section> AspNetBranchClass_Sections
		{
			get
			{
				return this._AspNetBranchClass_Sections;
			}
			set
			{
				this._AspNetBranchClass_Sections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranch_AspNetBranch_Class", Storage="_AspNetBranch", ThisKey="BranchId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetBranch AspNetBranch
		{
			get
			{
				return this._AspNetBranch.Entity;
			}
			set
			{
				AspNetBranch previousValue = this._AspNetBranch.Entity;
				if (((previousValue != value) 
							|| (this._AspNetBranch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetBranch.Entity = null;
						previousValue.AspNetBranch_Classes.Remove(this);
					}
					this._AspNetBranch.Entity = value;
					if ((value != null))
					{
						value.AspNetBranch_Classes.Add(this);
						this._BranchId = value.Id;
					}
					else
					{
						this._BranchId = default(int);
					}
					this.SendPropertyChanged("AspNetBranch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetClass_AspNetBranch_Class", Storage="_AspNetClass", ThisKey="ClassId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetClass AspNetClass
		{
			get
			{
				return this._AspNetClass.Entity;
			}
			set
			{
				AspNetClass previousValue = this._AspNetClass.Entity;
				if (((previousValue != value) 
							|| (this._AspNetClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetClass.Entity = null;
						previousValue.AspNetBranch_Classes.Remove(this);
					}
					this._AspNetClass.Entity = value;
					if ((value != null))
					{
						value.AspNetBranch_Classes.Add(this);
						this._ClassId = value.Id;
					}
					else
					{
						this._ClassId = default(int);
					}
					this.SendPropertyChanged("AspNetClass");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetSession_AspNetBranch_Class", Storage="_AspNetSession", ThisKey="SessionId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public AspNetSession AspNetSession
		{
			get
			{
				return this._AspNetSession.Entity;
			}
			set
			{
				AspNetSession previousValue = this._AspNetSession.Entity;
				if (((previousValue != value) 
							|| (this._AspNetSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetSession.Entity = null;
						previousValue.AspNetBranch_Classes.Remove(this);
					}
					this._AspNetSession.Entity = value;
					if ((value != null))
					{
						value.AspNetBranch_Classes.Add(this);
						this._SessionId = value.Id;
					}
					else
					{
						this._SessionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AspNetSession");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetBranchClass_Sections(AspNetBranchClass_Section entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranch_Class = this;
		}
		
		private void detach_AspNetBranchClass_Sections(AspNetBranchClass_Section entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranch_Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetBranchClass_Sections")]
	public partial class AspNetBranchClass_Section : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BranchClassId;
		
		private int _SectionId;
		
		private bool _IsActive;
		
		private EntitySet<AspNetStudent_Enrollment> _AspNetStudent_Enrollments;
		
		private EntitySet<AspNetStudent_History> _AspNetStudent_Histories;
		
		private EntitySet<AspNetStudentSection> _AspNetStudentSections;
		
		private EntitySet<AspNetTeacher_Enrollment> _AspNetTeacher_Enrollments;
		
		private EntitySet<AspNetTeacher_History> _AspNetTeacher_Histories;
		
		private EntityRef<AspNetBranch_Class> _AspNetBranch_Class;
		
		private EntityRef<AspNetSection> _AspNetSection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBranchClassIdChanging(int value);
    partial void OnBranchClassIdChanged();
    partial void OnSectionIdChanging(int value);
    partial void OnSectionIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public AspNetBranchClass_Section()
		{
			this._AspNetStudent_Enrollments = new EntitySet<AspNetStudent_Enrollment>(new Action<AspNetStudent_Enrollment>(this.attach_AspNetStudent_Enrollments), new Action<AspNetStudent_Enrollment>(this.detach_AspNetStudent_Enrollments));
			this._AspNetStudent_Histories = new EntitySet<AspNetStudent_History>(new Action<AspNetStudent_History>(this.attach_AspNetStudent_Histories), new Action<AspNetStudent_History>(this.detach_AspNetStudent_Histories));
			this._AspNetStudentSections = new EntitySet<AspNetStudentSection>(new Action<AspNetStudentSection>(this.attach_AspNetStudentSections), new Action<AspNetStudentSection>(this.detach_AspNetStudentSections));
			this._AspNetTeacher_Enrollments = new EntitySet<AspNetTeacher_Enrollment>(new Action<AspNetTeacher_Enrollment>(this.attach_AspNetTeacher_Enrollments), new Action<AspNetTeacher_Enrollment>(this.detach_AspNetTeacher_Enrollments));
			this._AspNetTeacher_Histories = new EntitySet<AspNetTeacher_History>(new Action<AspNetTeacher_History>(this.attach_AspNetTeacher_Histories), new Action<AspNetTeacher_History>(this.detach_AspNetTeacher_Histories));
			this._AspNetBranch_Class = default(EntityRef<AspNetBranch_Class>);
			this._AspNetSection = default(EntityRef<AspNetSection>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchClassId", DbType="Int NOT NULL")]
		public int BranchClassId
		{
			get
			{
				return this._BranchClassId;
			}
			set
			{
				if ((this._BranchClassId != value))
				{
					if (this._AspNetBranch_Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchClassIdChanging(value);
					this.SendPropertyChanging();
					this._BranchClassId = value;
					this.SendPropertyChanged("BranchClassId");
					this.OnBranchClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionId", DbType="Int NOT NULL")]
		public int SectionId
		{
			get
			{
				return this._SectionId;
			}
			set
			{
				if ((this._SectionId != value))
				{
					if (this._AspNetSection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionIdChanging(value);
					this.SendPropertyChanging();
					this._SectionId = value;
					this.SendPropertyChanged("SectionId");
					this.OnSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranchClass_Section_AspNetStudent_Enrollment", Storage="_AspNetStudent_Enrollments", ThisKey="Id", OtherKey="SectionId")]
		public EntitySet<AspNetStudent_Enrollment> AspNetStudent_Enrollments
		{
			get
			{
				return this._AspNetStudent_Enrollments;
			}
			set
			{
				this._AspNetStudent_Enrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranchClass_Section_AspNetStudent_History", Storage="_AspNetStudent_Histories", ThisKey="Id", OtherKey="SectionId")]
		public EntitySet<AspNetStudent_History> AspNetStudent_Histories
		{
			get
			{
				return this._AspNetStudent_Histories;
			}
			set
			{
				this._AspNetStudent_Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranchClass_Section_AspNetStudentSection", Storage="_AspNetStudentSections", ThisKey="Id", OtherKey="BranchClassSectionId")]
		public EntitySet<AspNetStudentSection> AspNetStudentSections
		{
			get
			{
				return this._AspNetStudentSections;
			}
			set
			{
				this._AspNetStudentSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranchClass_Section_AspNetTeacher_Enrollment", Storage="_AspNetTeacher_Enrollments", ThisKey="Id", OtherKey="SectionId")]
		public EntitySet<AspNetTeacher_Enrollment> AspNetTeacher_Enrollments
		{
			get
			{
				return this._AspNetTeacher_Enrollments;
			}
			set
			{
				this._AspNetTeacher_Enrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranchClass_Section_AspNetTeacher_History", Storage="_AspNetTeacher_Histories", ThisKey="Id", OtherKey="SectionId")]
		public EntitySet<AspNetTeacher_History> AspNetTeacher_Histories
		{
			get
			{
				return this._AspNetTeacher_Histories;
			}
			set
			{
				this._AspNetTeacher_Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranch_Class_AspNetBranchClass_Section", Storage="_AspNetBranch_Class", ThisKey="BranchClassId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetBranch_Class AspNetBranch_Class
		{
			get
			{
				return this._AspNetBranch_Class.Entity;
			}
			set
			{
				AspNetBranch_Class previousValue = this._AspNetBranch_Class.Entity;
				if (((previousValue != value) 
							|| (this._AspNetBranch_Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetBranch_Class.Entity = null;
						previousValue.AspNetBranchClass_Sections.Remove(this);
					}
					this._AspNetBranch_Class.Entity = value;
					if ((value != null))
					{
						value.AspNetBranchClass_Sections.Add(this);
						this._BranchClassId = value.Id;
					}
					else
					{
						this._BranchClassId = default(int);
					}
					this.SendPropertyChanged("AspNetBranch_Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetSection_AspNetBranchClass_Section", Storage="_AspNetSection", ThisKey="SectionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetSection AspNetSection
		{
			get
			{
				return this._AspNetSection.Entity;
			}
			set
			{
				AspNetSection previousValue = this._AspNetSection.Entity;
				if (((previousValue != value) 
							|| (this._AspNetSection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetSection.Entity = null;
						previousValue.AspNetBranchClass_Sections.Remove(this);
					}
					this._AspNetSection.Entity = value;
					if ((value != null))
					{
						value.AspNetBranchClass_Sections.Add(this);
						this._SectionId = value.Id;
					}
					else
					{
						this._SectionId = default(int);
					}
					this.SendPropertyChanged("AspNetSection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetStudent_Enrollments(AspNetStudent_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranchClass_Section = this;
		}
		
		private void detach_AspNetStudent_Enrollments(AspNetStudent_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranchClass_Section = null;
		}
		
		private void attach_AspNetStudent_Histories(AspNetStudent_History entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranchClass_Section = this;
		}
		
		private void detach_AspNetStudent_Histories(AspNetStudent_History entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranchClass_Section = null;
		}
		
		private void attach_AspNetStudentSections(AspNetStudentSection entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranchClass_Section = this;
		}
		
		private void detach_AspNetStudentSections(AspNetStudentSection entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranchClass_Section = null;
		}
		
		private void attach_AspNetTeacher_Enrollments(AspNetTeacher_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranchClass_Section = this;
		}
		
		private void detach_AspNetTeacher_Enrollments(AspNetTeacher_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranchClass_Section = null;
		}
		
		private void attach_AspNetTeacher_Histories(AspNetTeacher_History entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranchClass_Section = this;
		}
		
		private void detach_AspNetTeacher_Histories(AspNetTeacher_History entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranchClass_Section = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetBranches")]
	public partial class AspNetBranch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _SchoolId;
		
		private string _BranchPrincipalId;
		
		private bool _IsActive;
		
		private string _Address;
		
		private EntitySet<AspNetBranch_Admin> _AspNetBranch_Admins;
		
		private EntitySet<AspNetBranch_Class> _AspNetBranch_Classes;
		
		private EntitySet<AspNetEmployee> _AspNetEmployees;
		
		private EntitySet<AspNetStudent> _AspNetStudents;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSchoolIdChanging(int value);
    partial void OnSchoolIdChanged();
    partial void OnBranchPrincipalIdChanging(string value);
    partial void OnBranchPrincipalIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public AspNetBranch()
		{
			this._AspNetBranch_Admins = new EntitySet<AspNetBranch_Admin>(new Action<AspNetBranch_Admin>(this.attach_AspNetBranch_Admins), new Action<AspNetBranch_Admin>(this.detach_AspNetBranch_Admins));
			this._AspNetBranch_Classes = new EntitySet<AspNetBranch_Class>(new Action<AspNetBranch_Class>(this.attach_AspNetBranch_Classes), new Action<AspNetBranch_Class>(this.detach_AspNetBranch_Classes));
			this._AspNetEmployees = new EntitySet<AspNetEmployee>(new Action<AspNetEmployee>(this.attach_AspNetEmployees), new Action<AspNetEmployee>(this.detach_AspNetEmployees));
			this._AspNetStudents = new EntitySet<AspNetStudent>(new Action<AspNetStudent>(this.attach_AspNetStudents), new Action<AspNetStudent>(this.detach_AspNetStudents));
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", DbType="Int NOT NULL")]
		public int SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchPrincipalId", DbType="NVarChar(128)")]
		public string BranchPrincipalId
		{
			get
			{
				return this._BranchPrincipalId;
			}
			set
			{
				if ((this._BranchPrincipalId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchPrincipalIdChanging(value);
					this.SendPropertyChanging();
					this._BranchPrincipalId = value;
					this.SendPropertyChanged("BranchPrincipalId");
					this.OnBranchPrincipalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(512)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranch_AspNetBranch_Admin", Storage="_AspNetBranch_Admins", ThisKey="Id", OtherKey="BranchId")]
		public EntitySet<AspNetBranch_Admin> AspNetBranch_Admins
		{
			get
			{
				return this._AspNetBranch_Admins;
			}
			set
			{
				this._AspNetBranch_Admins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranch_AspNetBranch_Class", Storage="_AspNetBranch_Classes", ThisKey="Id", OtherKey="BranchId")]
		public EntitySet<AspNetBranch_Class> AspNetBranch_Classes
		{
			get
			{
				return this._AspNetBranch_Classes;
			}
			set
			{
				this._AspNetBranch_Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranch_AspNetEmployee", Storage="_AspNetEmployees", ThisKey="Id", OtherKey="BranchId")]
		public EntitySet<AspNetEmployee> AspNetEmployees
		{
			get
			{
				return this._AspNetEmployees;
			}
			set
			{
				this._AspNetEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranch_AspNetStudent", Storage="_AspNetStudents", ThisKey="Id", OtherKey="BranchId")]
		public EntitySet<AspNetStudent> AspNetStudents
		{
			get
			{
				return this._AspNetStudents;
			}
			set
			{
				this._AspNetStudents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetBranch", Storage="_AspNetUser", ThisKey="BranchPrincipalId", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetBranches.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetBranches.Add(this);
						this._BranchPrincipalId = value.Id;
					}
					else
					{
						this._BranchPrincipalId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetBranch_Admins(AspNetBranch_Admin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranch = this;
		}
		
		private void detach_AspNetBranch_Admins(AspNetBranch_Admin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranch = null;
		}
		
		private void attach_AspNetBranch_Classes(AspNetBranch_Class entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranch = this;
		}
		
		private void detach_AspNetBranch_Classes(AspNetBranch_Class entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranch = null;
		}
		
		private void attach_AspNetEmployees(AspNetEmployee entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranch = this;
		}
		
		private void detach_AspNetEmployees(AspNetEmployee entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranch = null;
		}
		
		private void attach_AspNetStudents(AspNetStudent entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranch = this;
		}
		
		private void detach_AspNetStudents(AspNetStudent entity)
		{
			this.SendPropertyChanging();
			entity.AspNetBranch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetClass_Courses")]
	public partial class AspNetClass_Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClassId;
		
		private int _CourseId;
		
		private bool _IsMandatory;
		
		private bool _IsActive;
		
		private EntityRef<AspNetClass> _AspNetClass;
		
		private EntityRef<AspNetCourse> _AspNetCourse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnIsMandatoryChanging(bool value);
    partial void OnIsMandatoryChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public AspNetClass_Course()
		{
			this._AspNetClass = default(EntityRef<AspNetClass>);
			this._AspNetCourse = default(EntityRef<AspNetCourse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int NOT NULL")]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._AspNetClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._AspNetCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMandatory", DbType="Bit NOT NULL")]
		public bool IsMandatory
		{
			get
			{
				return this._IsMandatory;
			}
			set
			{
				if ((this._IsMandatory != value))
				{
					this.OnIsMandatoryChanging(value);
					this.SendPropertyChanging();
					this._IsMandatory = value;
					this.SendPropertyChanged("IsMandatory");
					this.OnIsMandatoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetClass_AspNetClass_Course", Storage="_AspNetClass", ThisKey="ClassId", OtherKey="Id", IsForeignKey=true)]
		public AspNetClass AspNetClass
		{
			get
			{
				return this._AspNetClass.Entity;
			}
			set
			{
				AspNetClass previousValue = this._AspNetClass.Entity;
				if (((previousValue != value) 
							|| (this._AspNetClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetClass.Entity = null;
						previousValue.AspNetClass_Courses.Remove(this);
					}
					this._AspNetClass.Entity = value;
					if ((value != null))
					{
						value.AspNetClass_Courses.Add(this);
						this._ClassId = value.Id;
					}
					else
					{
						this._ClassId = default(int);
					}
					this.SendPropertyChanged("AspNetClass");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetCourse_AspNetClass_Course", Storage="_AspNetCourse", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true)]
		public AspNetCourse AspNetCourse
		{
			get
			{
				return this._AspNetCourse.Entity;
			}
			set
			{
				AspNetCourse previousValue = this._AspNetCourse.Entity;
				if (((previousValue != value) 
							|| (this._AspNetCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetCourse.Entity = null;
						previousValue.AspNetClass_Courses.Remove(this);
					}
					this._AspNetCourse.Entity = value;
					if ((value != null))
					{
						value.AspNetClass_Courses.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("AspNetCourse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetClasses")]
	public partial class AspNetClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _IsActive;
		
		private System.Nullable<int> _NextClassId;
		
		private EntitySet<AspNetBranch_Class> _AspNetBranch_Classes;
		
		private EntitySet<AspNetClass_Course> _AspNetClass_Courses;
		
		private EntitySet<AspNetClass> _AspNetClasses;
		
		private EntityRef<AspNetClass> _AspNetClass1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnNextClassIdChanging(System.Nullable<int> value);
    partial void OnNextClassIdChanged();
    #endregion
		
		public AspNetClass()
		{
			this._AspNetBranch_Classes = new EntitySet<AspNetBranch_Class>(new Action<AspNetBranch_Class>(this.attach_AspNetBranch_Classes), new Action<AspNetBranch_Class>(this.detach_AspNetBranch_Classes));
			this._AspNetClass_Courses = new EntitySet<AspNetClass_Course>(new Action<AspNetClass_Course>(this.attach_AspNetClass_Courses), new Action<AspNetClass_Course>(this.detach_AspNetClass_Courses));
			this._AspNetClasses = new EntitySet<AspNetClass>(new Action<AspNetClass>(this.attach_AspNetClasses), new Action<AspNetClass>(this.detach_AspNetClasses));
			this._AspNetClass1 = default(EntityRef<AspNetClass>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextClassId", DbType="Int")]
		public System.Nullable<int> NextClassId
		{
			get
			{
				return this._NextClassId;
			}
			set
			{
				if ((this._NextClassId != value))
				{
					if (this._AspNetClass1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNextClassIdChanging(value);
					this.SendPropertyChanging();
					this._NextClassId = value;
					this.SendPropertyChanged("NextClassId");
					this.OnNextClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetClass_AspNetBranch_Class", Storage="_AspNetBranch_Classes", ThisKey="Id", OtherKey="ClassId")]
		public EntitySet<AspNetBranch_Class> AspNetBranch_Classes
		{
			get
			{
				return this._AspNetBranch_Classes;
			}
			set
			{
				this._AspNetBranch_Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetClass_AspNetClass_Course", Storage="_AspNetClass_Courses", ThisKey="Id", OtherKey="ClassId")]
		public EntitySet<AspNetClass_Course> AspNetClass_Courses
		{
			get
			{
				return this._AspNetClass_Courses;
			}
			set
			{
				this._AspNetClass_Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetClass_AspNetClass", Storage="_AspNetClasses", ThisKey="Id", OtherKey="NextClassId")]
		public EntitySet<AspNetClass> AspNetClasses
		{
			get
			{
				return this._AspNetClasses;
			}
			set
			{
				this._AspNetClasses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetClass_AspNetClass", Storage="_AspNetClass1", ThisKey="NextClassId", OtherKey="Id", IsForeignKey=true)]
		public AspNetClass AspNetClass1
		{
			get
			{
				return this._AspNetClass1.Entity;
			}
			set
			{
				AspNetClass previousValue = this._AspNetClass1.Entity;
				if (((previousValue != value) 
							|| (this._AspNetClass1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetClass1.Entity = null;
						previousValue.AspNetClasses.Remove(this);
					}
					this._AspNetClass1.Entity = value;
					if ((value != null))
					{
						value.AspNetClasses.Add(this);
						this._NextClassId = value.Id;
					}
					else
					{
						this._NextClassId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AspNetClass1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetBranch_Classes(AspNetBranch_Class entity)
		{
			this.SendPropertyChanging();
			entity.AspNetClass = this;
		}
		
		private void detach_AspNetBranch_Classes(AspNetBranch_Class entity)
		{
			this.SendPropertyChanging();
			entity.AspNetClass = null;
		}
		
		private void attach_AspNetClass_Courses(AspNetClass_Course entity)
		{
			this.SendPropertyChanging();
			entity.AspNetClass = this;
		}
		
		private void detach_AspNetClass_Courses(AspNetClass_Course entity)
		{
			this.SendPropertyChanging();
			entity.AspNetClass = null;
		}
		
		private void attach_AspNetClasses(AspNetClass entity)
		{
			this.SendPropertyChanging();
			entity.AspNetClass1 = this;
		}
		
		private void detach_AspNetClasses(AspNetClass entity)
		{
			this.SendPropertyChanging();
			entity.AspNetClass1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetCoursePackages")]
	public partial class AspNetCoursePackage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CourseId;
		
		private int _PackageId;
		
		private EntityRef<AspNetCourse> _AspNetCourse;
		
		private EntityRef<AspNetPackage> _AspNetPackage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnPackageIdChanging(int value);
    partial void OnPackageIdChanged();
    #endregion
		
		public AspNetCoursePackage()
		{
			this._AspNetCourse = default(EntityRef<AspNetCourse>);
			this._AspNetPackage = default(EntityRef<AspNetPackage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._AspNetCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageId", DbType="Int NOT NULL")]
		public int PackageId
		{
			get
			{
				return this._PackageId;
			}
			set
			{
				if ((this._PackageId != value))
				{
					if (this._AspNetPackage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIdChanging(value);
					this.SendPropertyChanging();
					this._PackageId = value;
					this.SendPropertyChanged("PackageId");
					this.OnPackageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetCourse_AspNetCoursePackage", Storage="_AspNetCourse", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true)]
		public AspNetCourse AspNetCourse
		{
			get
			{
				return this._AspNetCourse.Entity;
			}
			set
			{
				AspNetCourse previousValue = this._AspNetCourse.Entity;
				if (((previousValue != value) 
							|| (this._AspNetCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetCourse.Entity = null;
						previousValue.AspNetCoursePackages.Remove(this);
					}
					this._AspNetCourse.Entity = value;
					if ((value != null))
					{
						value.AspNetCoursePackages.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("AspNetCourse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetPackage_AspNetCoursePackage", Storage="_AspNetPackage", ThisKey="PackageId", OtherKey="Id", IsForeignKey=true)]
		public AspNetPackage AspNetPackage
		{
			get
			{
				return this._AspNetPackage.Entity;
			}
			set
			{
				AspNetPackage previousValue = this._AspNetPackage.Entity;
				if (((previousValue != value) 
							|| (this._AspNetPackage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetPackage.Entity = null;
						previousValue.AspNetCoursePackages.Remove(this);
					}
					this._AspNetPackage.Entity = value;
					if ((value != null))
					{
						value.AspNetCoursePackages.Add(this);
						this._PackageId = value.Id;
					}
					else
					{
						this._PackageId = default(int);
					}
					this.SendPropertyChanged("AspNetPackage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetCourses")]
	public partial class AspNetCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _DepartmentId;
		
		private bool _IsActive;
		
		private EntitySet<AspNetClass_Course> _AspNetClass_Courses;
		
		private EntitySet<AspNetCoursePackage> _AspNetCoursePackages;
		
		private EntitySet<AspNetStudent_Enrollment> _AspNetStudent_Enrollments;
		
		private EntitySet<AspNetStudent_History> _AspNetStudent_Histories;
		
		private EntitySet<AspNetTeacher_Enrollment> _AspNetTeacher_Enrollments;
		
		private EntitySet<AspNetTeacher_History> _AspNetTeacher_Histories;
		
		private EntityRef<AspNetDepartment> _AspNetDepartment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public AspNetCourse()
		{
			this._AspNetClass_Courses = new EntitySet<AspNetClass_Course>(new Action<AspNetClass_Course>(this.attach_AspNetClass_Courses), new Action<AspNetClass_Course>(this.detach_AspNetClass_Courses));
			this._AspNetCoursePackages = new EntitySet<AspNetCoursePackage>(new Action<AspNetCoursePackage>(this.attach_AspNetCoursePackages), new Action<AspNetCoursePackage>(this.detach_AspNetCoursePackages));
			this._AspNetStudent_Enrollments = new EntitySet<AspNetStudent_Enrollment>(new Action<AspNetStudent_Enrollment>(this.attach_AspNetStudent_Enrollments), new Action<AspNetStudent_Enrollment>(this.detach_AspNetStudent_Enrollments));
			this._AspNetStudent_Histories = new EntitySet<AspNetStudent_History>(new Action<AspNetStudent_History>(this.attach_AspNetStudent_Histories), new Action<AspNetStudent_History>(this.detach_AspNetStudent_Histories));
			this._AspNetTeacher_Enrollments = new EntitySet<AspNetTeacher_Enrollment>(new Action<AspNetTeacher_Enrollment>(this.attach_AspNetTeacher_Enrollments), new Action<AspNetTeacher_Enrollment>(this.detach_AspNetTeacher_Enrollments));
			this._AspNetTeacher_Histories = new EntitySet<AspNetTeacher_History>(new Action<AspNetTeacher_History>(this.attach_AspNetTeacher_Histories), new Action<AspNetTeacher_History>(this.detach_AspNetTeacher_Histories));
			this._AspNetDepartment = default(EntityRef<AspNetDepartment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int NOT NULL")]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._AspNetDepartment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetCourse_AspNetClass_Course", Storage="_AspNetClass_Courses", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<AspNetClass_Course> AspNetClass_Courses
		{
			get
			{
				return this._AspNetClass_Courses;
			}
			set
			{
				this._AspNetClass_Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetCourse_AspNetCoursePackage", Storage="_AspNetCoursePackages", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<AspNetCoursePackage> AspNetCoursePackages
		{
			get
			{
				return this._AspNetCoursePackages;
			}
			set
			{
				this._AspNetCoursePackages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetCourse_AspNetStudent_Enrollment", Storage="_AspNetStudent_Enrollments", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<AspNetStudent_Enrollment> AspNetStudent_Enrollments
		{
			get
			{
				return this._AspNetStudent_Enrollments;
			}
			set
			{
				this._AspNetStudent_Enrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetCourse_AspNetStudent_History", Storage="_AspNetStudent_Histories", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<AspNetStudent_History> AspNetStudent_Histories
		{
			get
			{
				return this._AspNetStudent_Histories;
			}
			set
			{
				this._AspNetStudent_Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetCourse_AspNetTeacher_Enrollment", Storage="_AspNetTeacher_Enrollments", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<AspNetTeacher_Enrollment> AspNetTeacher_Enrollments
		{
			get
			{
				return this._AspNetTeacher_Enrollments;
			}
			set
			{
				this._AspNetTeacher_Enrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetCourse_AspNetTeacher_History", Storage="_AspNetTeacher_Histories", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<AspNetTeacher_History> AspNetTeacher_Histories
		{
			get
			{
				return this._AspNetTeacher_Histories;
			}
			set
			{
				this._AspNetTeacher_Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetDepartment_AspNetCourse", Storage="_AspNetDepartment", ThisKey="DepartmentId", OtherKey="Id", IsForeignKey=true)]
		public AspNetDepartment AspNetDepartment
		{
			get
			{
				return this._AspNetDepartment.Entity;
			}
			set
			{
				AspNetDepartment previousValue = this._AspNetDepartment.Entity;
				if (((previousValue != value) 
							|| (this._AspNetDepartment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetDepartment.Entity = null;
						previousValue.AspNetCourses.Remove(this);
					}
					this._AspNetDepartment.Entity = value;
					if ((value != null))
					{
						value.AspNetCourses.Add(this);
						this._DepartmentId = value.Id;
					}
					else
					{
						this._DepartmentId = default(int);
					}
					this.SendPropertyChanged("AspNetDepartment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetClass_Courses(AspNetClass_Course entity)
		{
			this.SendPropertyChanging();
			entity.AspNetCourse = this;
		}
		
		private void detach_AspNetClass_Courses(AspNetClass_Course entity)
		{
			this.SendPropertyChanging();
			entity.AspNetCourse = null;
		}
		
		private void attach_AspNetCoursePackages(AspNetCoursePackage entity)
		{
			this.SendPropertyChanging();
			entity.AspNetCourse = this;
		}
		
		private void detach_AspNetCoursePackages(AspNetCoursePackage entity)
		{
			this.SendPropertyChanging();
			entity.AspNetCourse = null;
		}
		
		private void attach_AspNetStudent_Enrollments(AspNetStudent_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetCourse = this;
		}
		
		private void detach_AspNetStudent_Enrollments(AspNetStudent_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetCourse = null;
		}
		
		private void attach_AspNetStudent_Histories(AspNetStudent_History entity)
		{
			this.SendPropertyChanging();
			entity.AspNetCourse = this;
		}
		
		private void detach_AspNetStudent_Histories(AspNetStudent_History entity)
		{
			this.SendPropertyChanging();
			entity.AspNetCourse = null;
		}
		
		private void attach_AspNetTeacher_Enrollments(AspNetTeacher_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetCourse = this;
		}
		
		private void detach_AspNetTeacher_Enrollments(AspNetTeacher_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetCourse = null;
		}
		
		private void attach_AspNetTeacher_Histories(AspNetTeacher_History entity)
		{
			this.SendPropertyChanging();
			entity.AspNetCourse = this;
		}
		
		private void detach_AspNetTeacher_Histories(AspNetTeacher_History entity)
		{
			this.SendPropertyChanging();
			entity.AspNetCourse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetDepartments")]
	public partial class AspNetDepartment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _HeadId;
		
		private bool _IsActive;
		
		private EntitySet<AspNetCourse> _AspNetCourses;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnHeadIdChanging(string value);
    partial void OnHeadIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public AspNetDepartment()
		{
			this._AspNetCourses = new EntitySet<AspNetCourse>(new Action<AspNetCourse>(this.attach_AspNetCourses), new Action<AspNetCourse>(this.detach_AspNetCourses));
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeadId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string HeadId
		{
			get
			{
				return this._HeadId;
			}
			set
			{
				if ((this._HeadId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeadIdChanging(value);
					this.SendPropertyChanging();
					this._HeadId = value;
					this.SendPropertyChanged("HeadId");
					this.OnHeadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetDepartment_AspNetCourse", Storage="_AspNetCourses", ThisKey="Id", OtherKey="DepartmentId")]
		public EntitySet<AspNetCourse> AspNetCourses
		{
			get
			{
				return this._AspNetCourses;
			}
			set
			{
				this._AspNetCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetDepartment", Storage="_AspNetUser", ThisKey="HeadId", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetDepartments.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetDepartments.Add(this);
						this._HeadId = value.Id;
					}
					else
					{
						this._HeadId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetCourses(AspNetCourse entity)
		{
			this.SendPropertyChanging();
			entity.AspNetDepartment = this;
		}
		
		private void detach_AspNetCourses(AspNetCourse entity)
		{
			this.SendPropertyChanging();
			entity.AspNetDepartment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetEmployee")]
	public partial class AspNetEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Position;
		
		private string _DateAvailable;
		
		private string _Name;
		
		private System.DateTime _BirthDate;
		
		private int _NationalityId;
		
		private int _ReligionId;
		
		private int _GenderId;
		
		private string _CellNo;
		
		private string _Landline;
		
		private string _SpouseName;
		
		private string _SpouseHighestDegree;
		
		private string _SpouseOccupation;
		
		private decimal _GrossSalary;
		
		private decimal _BasicSalary;
		
		private decimal _MedicalAllowance;
		
		private System.Nullable<bool> _Accomodation;
		
		private decimal _ProvidedFund;
		
		private decimal _Tax;
		
		private decimal _EOP;
		
		private System.Nullable<decimal> _Salary;
		
		private System.DateTime _JoiningDate;
		
		private string _Illness;
		
		private int _BranchId;
		
		private string _Address;
		
		private string _Spouse_Address;
		
		private string _File;
		
		private EntitySet<AspNetAccountant> _AspNetAccountants;
		
		private EntitySet<AspNetTeacher> _AspNetTeachers;
		
		private EntityRef<AspNetBranch> _AspNetBranch;
		
		private EntityRef<AspNetEmployeePosition> _AspNetEmployeePosition;
		
		private EntityRef<AspNetGender> _AspNetGender;
		
		private EntityRef<AspNetNationality> _AspNetNationality;
		
		private EntityRef<AspNetReligion> _AspNetReligion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPositionChanging(System.Nullable<int> value);
    partial void OnPositionChanged();
    partial void OnDateAvailableChanging(string value);
    partial void OnDateAvailableChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnNationalityIdChanging(int value);
    partial void OnNationalityIdChanged();
    partial void OnReligionIdChanging(int value);
    partial void OnReligionIdChanged();
    partial void OnGenderIdChanging(int value);
    partial void OnGenderIdChanged();
    partial void OnCellNoChanging(string value);
    partial void OnCellNoChanged();
    partial void OnLandlineChanging(string value);
    partial void OnLandlineChanged();
    partial void OnSpouseNameChanging(string value);
    partial void OnSpouseNameChanged();
    partial void OnSpouseHighestDegreeChanging(string value);
    partial void OnSpouseHighestDegreeChanged();
    partial void OnSpouseOccupationChanging(string value);
    partial void OnSpouseOccupationChanged();
    partial void OnGrossSalaryChanging(decimal value);
    partial void OnGrossSalaryChanged();
    partial void OnBasicSalaryChanging(decimal value);
    partial void OnBasicSalaryChanged();
    partial void OnMedicalAllowanceChanging(decimal value);
    partial void OnMedicalAllowanceChanged();
    partial void OnAccomodationChanging(System.Nullable<bool> value);
    partial void OnAccomodationChanged();
    partial void OnProvidedFundChanging(decimal value);
    partial void OnProvidedFundChanged();
    partial void OnTaxChanging(decimal value);
    partial void OnTaxChanged();
    partial void OnEOPChanging(decimal value);
    partial void OnEOPChanged();
    partial void OnSalaryChanging(System.Nullable<decimal> value);
    partial void OnSalaryChanged();
    partial void OnJoiningDateChanging(System.DateTime value);
    partial void OnJoiningDateChanged();
    partial void OnIllnessChanging(string value);
    partial void OnIllnessChanged();
    partial void OnBranchIdChanging(int value);
    partial void OnBranchIdChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnSpouse_AddressChanging(string value);
    partial void OnSpouse_AddressChanged();
    partial void OnFileChanging(string value);
    partial void OnFileChanged();
    #endregion
		
		public AspNetEmployee()
		{
			this._AspNetAccountants = new EntitySet<AspNetAccountant>(new Action<AspNetAccountant>(this.attach_AspNetAccountants), new Action<AspNetAccountant>(this.detach_AspNetAccountants));
			this._AspNetTeachers = new EntitySet<AspNetTeacher>(new Action<AspNetTeacher>(this.attach_AspNetTeachers), new Action<AspNetTeacher>(this.detach_AspNetTeachers));
			this._AspNetBranch = default(EntityRef<AspNetBranch>);
			this._AspNetEmployeePosition = default(EntityRef<AspNetEmployeePosition>);
			this._AspNetGender = default(EntityRef<AspNetGender>);
			this._AspNetNationality = default(EntityRef<AspNetNationality>);
			this._AspNetReligion = default(EntityRef<AspNetReligion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int")]
		public System.Nullable<int> Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					if (this._AspNetEmployeePosition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAvailable", DbType="NVarChar(MAX)")]
		public string DateAvailable
		{
			get
			{
				return this._DateAvailable;
			}
			set
			{
				if ((this._DateAvailable != value))
				{
					this.OnDateAvailableChanging(value);
					this.SendPropertyChanging();
					this._DateAvailable = value;
					this.SendPropertyChanged("DateAvailable");
					this.OnDateAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="DateTime NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalityId", DbType="Int NOT NULL")]
		public int NationalityId
		{
			get
			{
				return this._NationalityId;
			}
			set
			{
				if ((this._NationalityId != value))
				{
					if (this._AspNetNationality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNationalityIdChanging(value);
					this.SendPropertyChanging();
					this._NationalityId = value;
					this.SendPropertyChanged("NationalityId");
					this.OnNationalityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReligionId", DbType="Int NOT NULL")]
		public int ReligionId
		{
			get
			{
				return this._ReligionId;
			}
			set
			{
				if ((this._ReligionId != value))
				{
					if (this._AspNetReligion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReligionIdChanging(value);
					this.SendPropertyChanging();
					this._ReligionId = value;
					this.SendPropertyChanged("ReligionId");
					this.OnReligionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderId", DbType="Int NOT NULL")]
		public int GenderId
		{
			get
			{
				return this._GenderId;
			}
			set
			{
				if ((this._GenderId != value))
				{
					if (this._AspNetGender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderIdChanging(value);
					this.SendPropertyChanging();
					this._GenderId = value;
					this.SendPropertyChanged("GenderId");
					this.OnGenderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellNo", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CellNo
		{
			get
			{
				return this._CellNo;
			}
			set
			{
				if ((this._CellNo != value))
				{
					this.OnCellNoChanging(value);
					this.SendPropertyChanging();
					this._CellNo = value;
					this.SendPropertyChanged("CellNo");
					this.OnCellNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Landline", DbType="NVarChar(MAX)")]
		public string Landline
		{
			get
			{
				return this._Landline;
			}
			set
			{
				if ((this._Landline != value))
				{
					this.OnLandlineChanging(value);
					this.SendPropertyChanging();
					this._Landline = value;
					this.SendPropertyChanged("Landline");
					this.OnLandlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseName", DbType="NVarChar(MAX)")]
		public string SpouseName
		{
			get
			{
				return this._SpouseName;
			}
			set
			{
				if ((this._SpouseName != value))
				{
					this.OnSpouseNameChanging(value);
					this.SendPropertyChanging();
					this._SpouseName = value;
					this.SendPropertyChanged("SpouseName");
					this.OnSpouseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseHighestDegree", DbType="NVarChar(MAX)")]
		public string SpouseHighestDegree
		{
			get
			{
				return this._SpouseHighestDegree;
			}
			set
			{
				if ((this._SpouseHighestDegree != value))
				{
					this.OnSpouseHighestDegreeChanging(value);
					this.SendPropertyChanging();
					this._SpouseHighestDegree = value;
					this.SendPropertyChanged("SpouseHighestDegree");
					this.OnSpouseHighestDegreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseOccupation", DbType="NVarChar(MAX)")]
		public string SpouseOccupation
		{
			get
			{
				return this._SpouseOccupation;
			}
			set
			{
				if ((this._SpouseOccupation != value))
				{
					this.OnSpouseOccupationChanging(value);
					this.SendPropertyChanging();
					this._SpouseOccupation = value;
					this.SendPropertyChanged("SpouseOccupation");
					this.OnSpouseOccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrossSalary", DbType="Decimal(18,2) NOT NULL")]
		public decimal GrossSalary
		{
			get
			{
				return this._GrossSalary;
			}
			set
			{
				if ((this._GrossSalary != value))
				{
					this.OnGrossSalaryChanging(value);
					this.SendPropertyChanging();
					this._GrossSalary = value;
					this.SendPropertyChanged("GrossSalary");
					this.OnGrossSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicSalary", DbType="Decimal(18,2) NOT NULL")]
		public decimal BasicSalary
		{
			get
			{
				return this._BasicSalary;
			}
			set
			{
				if ((this._BasicSalary != value))
				{
					this.OnBasicSalaryChanging(value);
					this.SendPropertyChanging();
					this._BasicSalary = value;
					this.SendPropertyChanged("BasicSalary");
					this.OnBasicSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalAllowance", DbType="Decimal(18,2) NOT NULL")]
		public decimal MedicalAllowance
		{
			get
			{
				return this._MedicalAllowance;
			}
			set
			{
				if ((this._MedicalAllowance != value))
				{
					this.OnMedicalAllowanceChanging(value);
					this.SendPropertyChanging();
					this._MedicalAllowance = value;
					this.SendPropertyChanged("MedicalAllowance");
					this.OnMedicalAllowanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accomodation", DbType="Bit")]
		public System.Nullable<bool> Accomodation
		{
			get
			{
				return this._Accomodation;
			}
			set
			{
				if ((this._Accomodation != value))
				{
					this.OnAccomodationChanging(value);
					this.SendPropertyChanging();
					this._Accomodation = value;
					this.SendPropertyChanged("Accomodation");
					this.OnAccomodationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvidedFund", DbType="Decimal(18,2) NOT NULL")]
		public decimal ProvidedFund
		{
			get
			{
				return this._ProvidedFund;
			}
			set
			{
				if ((this._ProvidedFund != value))
				{
					this.OnProvidedFundChanging(value);
					this.SendPropertyChanging();
					this._ProvidedFund = value;
					this.SendPropertyChanged("ProvidedFund");
					this.OnProvidedFundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tax", DbType="Decimal(18,2) NOT NULL")]
		public decimal Tax
		{
			get
			{
				return this._Tax;
			}
			set
			{
				if ((this._Tax != value))
				{
					this.OnTaxChanging(value);
					this.SendPropertyChanging();
					this._Tax = value;
					this.SendPropertyChanged("Tax");
					this.OnTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EOP", DbType="Decimal(18,2) NOT NULL")]
		public decimal EOP
		{
			get
			{
				return this._EOP;
			}
			set
			{
				if ((this._EOP != value))
				{
					this.OnEOPChanging(value);
					this.SendPropertyChanging();
					this._EOP = value;
					this.SendPropertyChanged("EOP");
					this.OnEOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JoiningDate", DbType="DateTime NOT NULL")]
		public System.DateTime JoiningDate
		{
			get
			{
				return this._JoiningDate;
			}
			set
			{
				if ((this._JoiningDate != value))
				{
					this.OnJoiningDateChanging(value);
					this.SendPropertyChanging();
					this._JoiningDate = value;
					this.SendPropertyChanged("JoiningDate");
					this.OnJoiningDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Illness", DbType="NVarChar(MAX)")]
		public string Illness
		{
			get
			{
				return this._Illness;
			}
			set
			{
				if ((this._Illness != value))
				{
					this.OnIllnessChanging(value);
					this.SendPropertyChanging();
					this._Illness = value;
					this.SendPropertyChanged("Illness");
					this.OnIllnessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchId", DbType="Int NOT NULL")]
		public int BranchId
		{
			get
			{
				return this._BranchId;
			}
			set
			{
				if ((this._BranchId != value))
				{
					if (this._AspNetBranch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchIdChanging(value);
					this.SendPropertyChanging();
					this._BranchId = value;
					this.SendPropertyChanged("BranchId");
					this.OnBranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(512)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Spouse Address]", Storage="_Spouse_Address", DbType="NVarChar(512)")]
		public string Spouse_Address
		{
			get
			{
				return this._Spouse_Address;
			}
			set
			{
				if ((this._Spouse_Address != value))
				{
					this.OnSpouse_AddressChanging(value);
					this.SendPropertyChanging();
					this._Spouse_Address = value;
					this.SendPropertyChanged("Spouse_Address");
					this.OnSpouse_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[File]", Storage="_File", DbType="NVarChar(256)")]
		public string File
		{
			get
			{
				return this._File;
			}
			set
			{
				if ((this._File != value))
				{
					this.OnFileChanging(value);
					this.SendPropertyChanging();
					this._File = value;
					this.SendPropertyChanged("File");
					this.OnFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetEmployee_AspNetAccountant", Storage="_AspNetAccountants", ThisKey="Id", OtherKey="EmployeeId")]
		public EntitySet<AspNetAccountant> AspNetAccountants
		{
			get
			{
				return this._AspNetAccountants;
			}
			set
			{
				this._AspNetAccountants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetEmployee_AspNetTeacher", Storage="_AspNetTeachers", ThisKey="Id", OtherKey="EmployeeId")]
		public EntitySet<AspNetTeacher> AspNetTeachers
		{
			get
			{
				return this._AspNetTeachers;
			}
			set
			{
				this._AspNetTeachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranch_AspNetEmployee", Storage="_AspNetBranch", ThisKey="BranchId", OtherKey="Id", IsForeignKey=true)]
		public AspNetBranch AspNetBranch
		{
			get
			{
				return this._AspNetBranch.Entity;
			}
			set
			{
				AspNetBranch previousValue = this._AspNetBranch.Entity;
				if (((previousValue != value) 
							|| (this._AspNetBranch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetBranch.Entity = null;
						previousValue.AspNetEmployees.Remove(this);
					}
					this._AspNetBranch.Entity = value;
					if ((value != null))
					{
						value.AspNetEmployees.Add(this);
						this._BranchId = value.Id;
					}
					else
					{
						this._BranchId = default(int);
					}
					this.SendPropertyChanged("AspNetBranch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetEmployeePosition_AspNetEmployee", Storage="_AspNetEmployeePosition", ThisKey="Position", OtherKey="Id", IsForeignKey=true)]
		public AspNetEmployeePosition AspNetEmployeePosition
		{
			get
			{
				return this._AspNetEmployeePosition.Entity;
			}
			set
			{
				AspNetEmployeePosition previousValue = this._AspNetEmployeePosition.Entity;
				if (((previousValue != value) 
							|| (this._AspNetEmployeePosition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetEmployeePosition.Entity = null;
						previousValue.AspNetEmployees.Remove(this);
					}
					this._AspNetEmployeePosition.Entity = value;
					if ((value != null))
					{
						value.AspNetEmployees.Add(this);
						this._Position = value.Id;
					}
					else
					{
						this._Position = default(Nullable<int>);
					}
					this.SendPropertyChanged("AspNetEmployeePosition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetGender_AspNetEmployee", Storage="_AspNetGender", ThisKey="GenderId", OtherKey="Id", IsForeignKey=true)]
		public AspNetGender AspNetGender
		{
			get
			{
				return this._AspNetGender.Entity;
			}
			set
			{
				AspNetGender previousValue = this._AspNetGender.Entity;
				if (((previousValue != value) 
							|| (this._AspNetGender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetGender.Entity = null;
						previousValue.AspNetEmployees.Remove(this);
					}
					this._AspNetGender.Entity = value;
					if ((value != null))
					{
						value.AspNetEmployees.Add(this);
						this._GenderId = value.Id;
					}
					else
					{
						this._GenderId = default(int);
					}
					this.SendPropertyChanged("AspNetGender");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetNationality_AspNetEmployee", Storage="_AspNetNationality", ThisKey="NationalityId", OtherKey="Id", IsForeignKey=true)]
		public AspNetNationality AspNetNationality
		{
			get
			{
				return this._AspNetNationality.Entity;
			}
			set
			{
				AspNetNationality previousValue = this._AspNetNationality.Entity;
				if (((previousValue != value) 
							|| (this._AspNetNationality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetNationality.Entity = null;
						previousValue.AspNetEmployees.Remove(this);
					}
					this._AspNetNationality.Entity = value;
					if ((value != null))
					{
						value.AspNetEmployees.Add(this);
						this._NationalityId = value.Id;
					}
					else
					{
						this._NationalityId = default(int);
					}
					this.SendPropertyChanged("AspNetNationality");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetReligion_AspNetEmployee", Storage="_AspNetReligion", ThisKey="ReligionId", OtherKey="Id", IsForeignKey=true)]
		public AspNetReligion AspNetReligion
		{
			get
			{
				return this._AspNetReligion.Entity;
			}
			set
			{
				AspNetReligion previousValue = this._AspNetReligion.Entity;
				if (((previousValue != value) 
							|| (this._AspNetReligion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetReligion.Entity = null;
						previousValue.AspNetEmployees.Remove(this);
					}
					this._AspNetReligion.Entity = value;
					if ((value != null))
					{
						value.AspNetEmployees.Add(this);
						this._ReligionId = value.Id;
					}
					else
					{
						this._ReligionId = default(int);
					}
					this.SendPropertyChanged("AspNetReligion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetAccountants(AspNetAccountant entity)
		{
			this.SendPropertyChanging();
			entity.AspNetEmployee = this;
		}
		
		private void detach_AspNetAccountants(AspNetAccountant entity)
		{
			this.SendPropertyChanging();
			entity.AspNetEmployee = null;
		}
		
		private void attach_AspNetTeachers(AspNetTeacher entity)
		{
			this.SendPropertyChanging();
			entity.AspNetEmployee = this;
		}
		
		private void detach_AspNetTeachers(AspNetTeacher entity)
		{
			this.SendPropertyChanging();
			entity.AspNetEmployee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetEmployeePositions")]
	public partial class AspNetEmployeePosition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PositionName;
		
		private EntitySet<AspNetEmployee> _AspNetEmployees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPositionNameChanging(string value);
    partial void OnPositionNameChanged();
    #endregion
		
		public AspNetEmployeePosition()
		{
			this._AspNetEmployees = new EntitySet<AspNetEmployee>(new Action<AspNetEmployee>(this.attach_AspNetEmployees), new Action<AspNetEmployee>(this.detach_AspNetEmployees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PositionName
		{
			get
			{
				return this._PositionName;
			}
			set
			{
				if ((this._PositionName != value))
				{
					this.OnPositionNameChanging(value);
					this.SendPropertyChanging();
					this._PositionName = value;
					this.SendPropertyChanged("PositionName");
					this.OnPositionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetEmployeePosition_AspNetEmployee", Storage="_AspNetEmployees", ThisKey="Id", OtherKey="Position")]
		public EntitySet<AspNetEmployee> AspNetEmployees
		{
			get
			{
				return this._AspNetEmployees;
			}
			set
			{
				this._AspNetEmployees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetEmployees(AspNetEmployee entity)
		{
			this.SendPropertyChanging();
			entity.AspNetEmployeePosition = this;
		}
		
		private void detach_AspNetEmployees(AspNetEmployee entity)
		{
			this.SendPropertyChanging();
			entity.AspNetEmployeePosition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetGenders")]
	public partial class AspNetGender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private EntitySet<AspNetEmployee> _AspNetEmployees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public AspNetGender()
		{
			this._AspNetEmployees = new EntitySet<AspNetEmployee>(new Action<AspNetEmployee>(this.attach_AspNetEmployees), new Action<AspNetEmployee>(this.detach_AspNetEmployees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetGender_AspNetEmployee", Storage="_AspNetEmployees", ThisKey="Id", OtherKey="GenderId")]
		public EntitySet<AspNetEmployee> AspNetEmployees
		{
			get
			{
				return this._AspNetEmployees;
			}
			set
			{
				this._AspNetEmployees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetEmployees(AspNetEmployee entity)
		{
			this.SendPropertyChanging();
			entity.AspNetGender = this;
		}
		
		private void detach_AspNetEmployees(AspNetEmployee entity)
		{
			this.SendPropertyChanging();
			entity.AspNetGender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetLogs")]
	public partial class AspNetLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Operation;
		
		private System.DateTime _OperationStartTime;
		
		private string _UserId;
		
		private System.DateTime _OperationEndTime;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOperationChanging(string value);
    partial void OnOperationChanged();
    partial void OnOperationStartTimeChanging(System.DateTime value);
    partial void OnOperationStartTimeChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnOperationEndTimeChanging(System.DateTime value);
    partial void OnOperationEndTimeChanged();
    #endregion
		
		public AspNetLog()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Operation", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationStartTime", DbType="DateTime NOT NULL")]
		public System.DateTime OperationStartTime
		{
			get
			{
				return this._OperationStartTime;
			}
			set
			{
				if ((this._OperationStartTime != value))
				{
					this.OnOperationStartTimeChanging(value);
					this.SendPropertyChanging();
					this._OperationStartTime = value;
					this.SendPropertyChanged("OperationStartTime");
					this.OnOperationStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationEndTime", DbType="DateTime NOT NULL")]
		public System.DateTime OperationEndTime
		{
			get
			{
				return this._OperationEndTime;
			}
			set
			{
				if ((this._OperationEndTime != value))
				{
					this.OnOperationEndTimeChanging(value);
					this.SendPropertyChanging();
					this._OperationEndTime = value;
					this.SendPropertyChanged("OperationEndTime");
					this.OnOperationEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetLog", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetLogs.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetLogs.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetNationalities")]
	public partial class AspNetNationality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private EntitySet<AspNetEmployee> _AspNetEmployees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public AspNetNationality()
		{
			this._AspNetEmployees = new EntitySet<AspNetEmployee>(new Action<AspNetEmployee>(this.attach_AspNetEmployees), new Action<AspNetEmployee>(this.detach_AspNetEmployees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetNationality_AspNetEmployee", Storage="_AspNetEmployees", ThisKey="Id", OtherKey="NationalityId")]
		public EntitySet<AspNetEmployee> AspNetEmployees
		{
			get
			{
				return this._AspNetEmployees;
			}
			set
			{
				this._AspNetEmployees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetEmployees(AspNetEmployee entity)
		{
			this.SendPropertyChanging();
			entity.AspNetNationality = this;
		}
		
		private void detach_AspNetEmployees(AspNetEmployee entity)
		{
			this.SendPropertyChanging();
			entity.AspNetNationality = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetPackages")]
	public partial class AspNetPackage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private EntitySet<AspNetCoursePackage> _AspNetCoursePackages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public AspNetPackage()
		{
			this._AspNetCoursePackages = new EntitySet<AspNetCoursePackage>(new Action<AspNetCoursePackage>(this.attach_AspNetCoursePackages), new Action<AspNetCoursePackage>(this.detach_AspNetCoursePackages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetPackage_AspNetCoursePackage", Storage="_AspNetCoursePackages", ThisKey="Id", OtherKey="PackageId")]
		public EntitySet<AspNetCoursePackage> AspNetCoursePackages
		{
			get
			{
				return this._AspNetCoursePackages;
			}
			set
			{
				this._AspNetCoursePackages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetCoursePackages(AspNetCoursePackage entity)
		{
			this.SendPropertyChanging();
			entity.AspNetPackage = this;
		}
		
		private void detach_AspNetCoursePackages(AspNetCoursePackage entity)
		{
			this.SendPropertyChanging();
			entity.AspNetPackage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetParents")]
	public partial class AspNetParent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserId;
		
		private string _Name;
		
		private string _Address;
		
		private EntitySet<AspNetStudent> _AspNetStudents;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public AspNetParent()
		{
			this._AspNetStudents = new EntitySet<AspNetStudent>(new Action<AspNetStudent>(this.attach_AspNetStudents), new Action<AspNetStudent>(this.detach_AspNetStudents));
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(128)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetParent_AspNetStudent", Storage="_AspNetStudents", ThisKey="Id", OtherKey="ParentId")]
		public EntitySet<AspNetStudent> AspNetStudents
		{
			get
			{
				return this._AspNetStudents;
			}
			set
			{
				this._AspNetStudents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetParent", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetParents.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetParents.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetStudents(AspNetStudent entity)
		{
			this.SendPropertyChanging();
			entity.AspNetParent = this;
		}
		
		private void detach_AspNetStudents(AspNetStudent entity)
		{
			this.SendPropertyChanging();
			entity.AspNetParent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetReligions")]
	public partial class AspNetReligion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private EntitySet<AspNetEmployee> _AspNetEmployees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public AspNetReligion()
		{
			this._AspNetEmployees = new EntitySet<AspNetEmployee>(new Action<AspNetEmployee>(this.attach_AspNetEmployees), new Action<AspNetEmployee>(this.detach_AspNetEmployees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetReligion_AspNetEmployee", Storage="_AspNetEmployees", ThisKey="Id", OtherKey="ReligionId")]
		public EntitySet<AspNetEmployee> AspNetEmployees
		{
			get
			{
				return this._AspNetEmployees;
			}
			set
			{
				this._AspNetEmployees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetEmployees(AspNetEmployee entity)
		{
			this.SendPropertyChanging();
			entity.AspNetReligion = this;
		}
		
		private void detach_AspNetEmployees(AspNetEmployee entity)
		{
			this.SendPropertyChanging();
			entity.AspNetReligion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetRoles")]
	public partial class AspNetRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private EntitySet<AspNetUserRole> _AspNetUserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AspNetRole()
		{
			this._AspNetUserRoles = new EntitySet<AspNetUserRole>(new Action<AspNetUserRole>(this.attach_AspNetUserRoles), new Action<AspNetUserRole>(this.detach_AspNetUserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_AspNetUserRole", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetSections")]
	public partial class AspNetSection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<AspNetBranchClass_Section> _AspNetBranchClass_Sections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AspNetSection()
		{
			this._AspNetBranchClass_Sections = new EntitySet<AspNetBranchClass_Section>(new Action<AspNetBranchClass_Section>(this.attach_AspNetBranchClass_Sections), new Action<AspNetBranchClass_Section>(this.detach_AspNetBranchClass_Sections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetSection_AspNetBranchClass_Section", Storage="_AspNetBranchClass_Sections", ThisKey="Id", OtherKey="SectionId")]
		public EntitySet<AspNetBranchClass_Section> AspNetBranchClass_Sections
		{
			get
			{
				return this._AspNetBranchClass_Sections;
			}
			set
			{
				this._AspNetBranchClass_Sections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetBranchClass_Sections(AspNetBranchClass_Section entity)
		{
			this.SendPropertyChanging();
			entity.AspNetSection = this;
		}
		
		private void detach_AspNetBranchClass_Sections(AspNetBranchClass_Section entity)
		{
			this.SendPropertyChanging();
			entity.AspNetSection = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetSessions")]
	public partial class AspNetSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Year;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private int _StatusId;
		
		private bool _IsActive;
		
		private System.Nullable<int> _Next;
		
		private EntitySet<AspNetBranch_Class> _AspNetBranch_Classes;
		
		private EntitySet<AspNetSession> _AspNetSessions;
		
		private EntitySet<AspNetStudent_Enrollment> _AspNetStudent_Enrollments;
		
		private EntitySet<AspNetStudent_History> _AspNetStudent_Histories;
		
		private EntitySet<AspNetTeacher_Enrollment> _AspNetTeacher_Enrollments;
		
		private EntitySet<AspNetTeacher_History> _AspNetTeacher_Histories;
		
		private EntitySet<AspNetTerm> _AspNetTerms;
		
		private EntityRef<AspNetSession> _AspNetSession1;
		
		private EntityRef<AspNetStatus> _AspNetStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnStatusIdChanging(int value);
    partial void OnStatusIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnNextChanging(System.Nullable<int> value);
    partial void OnNextChanged();
    #endregion
		
		public AspNetSession()
		{
			this._AspNetBranch_Classes = new EntitySet<AspNetBranch_Class>(new Action<AspNetBranch_Class>(this.attach_AspNetBranch_Classes), new Action<AspNetBranch_Class>(this.detach_AspNetBranch_Classes));
			this._AspNetSessions = new EntitySet<AspNetSession>(new Action<AspNetSession>(this.attach_AspNetSessions), new Action<AspNetSession>(this.detach_AspNetSessions));
			this._AspNetStudent_Enrollments = new EntitySet<AspNetStudent_Enrollment>(new Action<AspNetStudent_Enrollment>(this.attach_AspNetStudent_Enrollments), new Action<AspNetStudent_Enrollment>(this.detach_AspNetStudent_Enrollments));
			this._AspNetStudent_Histories = new EntitySet<AspNetStudent_History>(new Action<AspNetStudent_History>(this.attach_AspNetStudent_Histories), new Action<AspNetStudent_History>(this.detach_AspNetStudent_Histories));
			this._AspNetTeacher_Enrollments = new EntitySet<AspNetTeacher_Enrollment>(new Action<AspNetTeacher_Enrollment>(this.attach_AspNetTeacher_Enrollments), new Action<AspNetTeacher_Enrollment>(this.detach_AspNetTeacher_Enrollments));
			this._AspNetTeacher_Histories = new EntitySet<AspNetTeacher_History>(new Action<AspNetTeacher_History>(this.attach_AspNetTeacher_Histories), new Action<AspNetTeacher_History>(this.detach_AspNetTeacher_Histories));
			this._AspNetTerms = new EntitySet<AspNetTerm>(new Action<AspNetTerm>(this.attach_AspNetTerms), new Action<AspNetTerm>(this.detach_AspNetTerms));
			this._AspNetSession1 = default(EntityRef<AspNetSession>);
			this._AspNetStatus = default(EntityRef<AspNetStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", DbType="Int NOT NULL")]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					if (this._AspNetStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Next", DbType="Int")]
		public System.Nullable<int> Next
		{
			get
			{
				return this._Next;
			}
			set
			{
				if ((this._Next != value))
				{
					if (this._AspNetSession1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNextChanging(value);
					this.SendPropertyChanging();
					this._Next = value;
					this.SendPropertyChanged("Next");
					this.OnNextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetSession_AspNetBranch_Class", Storage="_AspNetBranch_Classes", ThisKey="Id", OtherKey="SessionId")]
		public EntitySet<AspNetBranch_Class> AspNetBranch_Classes
		{
			get
			{
				return this._AspNetBranch_Classes;
			}
			set
			{
				this._AspNetBranch_Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetSession_AspNetSession", Storage="_AspNetSessions", ThisKey="Id", OtherKey="Next")]
		public EntitySet<AspNetSession> AspNetSessions
		{
			get
			{
				return this._AspNetSessions;
			}
			set
			{
				this._AspNetSessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetSession_AspNetStudent_Enrollment", Storage="_AspNetStudent_Enrollments", ThisKey="Id", OtherKey="SessionId")]
		public EntitySet<AspNetStudent_Enrollment> AspNetStudent_Enrollments
		{
			get
			{
				return this._AspNetStudent_Enrollments;
			}
			set
			{
				this._AspNetStudent_Enrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetSession_AspNetStudent_History", Storage="_AspNetStudent_Histories", ThisKey="Id", OtherKey="SessionId")]
		public EntitySet<AspNetStudent_History> AspNetStudent_Histories
		{
			get
			{
				return this._AspNetStudent_Histories;
			}
			set
			{
				this._AspNetStudent_Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetSession_AspNetTeacher_Enrollment", Storage="_AspNetTeacher_Enrollments", ThisKey="Id", OtherKey="SessionId")]
		public EntitySet<AspNetTeacher_Enrollment> AspNetTeacher_Enrollments
		{
			get
			{
				return this._AspNetTeacher_Enrollments;
			}
			set
			{
				this._AspNetTeacher_Enrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetSession_AspNetTeacher_History", Storage="_AspNetTeacher_Histories", ThisKey="Id", OtherKey="SessionId")]
		public EntitySet<AspNetTeacher_History> AspNetTeacher_Histories
		{
			get
			{
				return this._AspNetTeacher_Histories;
			}
			set
			{
				this._AspNetTeacher_Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetSession_AspNetTerm", Storage="_AspNetTerms", ThisKey="Id", OtherKey="SessionId")]
		public EntitySet<AspNetTerm> AspNetTerms
		{
			get
			{
				return this._AspNetTerms;
			}
			set
			{
				this._AspNetTerms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetSession_AspNetSession", Storage="_AspNetSession1", ThisKey="Next", OtherKey="Id", IsForeignKey=true)]
		public AspNetSession AspNetSession1
		{
			get
			{
				return this._AspNetSession1.Entity;
			}
			set
			{
				AspNetSession previousValue = this._AspNetSession1.Entity;
				if (((previousValue != value) 
							|| (this._AspNetSession1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetSession1.Entity = null;
						previousValue.AspNetSessions.Remove(this);
					}
					this._AspNetSession1.Entity = value;
					if ((value != null))
					{
						value.AspNetSessions.Add(this);
						this._Next = value.Id;
					}
					else
					{
						this._Next = default(Nullable<int>);
					}
					this.SendPropertyChanged("AspNetSession1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetStatus_AspNetSession", Storage="_AspNetStatus", ThisKey="StatusId", OtherKey="Id", IsForeignKey=true)]
		public AspNetStatus AspNetStatus
		{
			get
			{
				return this._AspNetStatus.Entity;
			}
			set
			{
				AspNetStatus previousValue = this._AspNetStatus.Entity;
				if (((previousValue != value) 
							|| (this._AspNetStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetStatus.Entity = null;
						previousValue.AspNetSessions.Remove(this);
					}
					this._AspNetStatus.Entity = value;
					if ((value != null))
					{
						value.AspNetSessions.Add(this);
						this._StatusId = value.Id;
					}
					else
					{
						this._StatusId = default(int);
					}
					this.SendPropertyChanged("AspNetStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetBranch_Classes(AspNetBranch_Class entity)
		{
			this.SendPropertyChanging();
			entity.AspNetSession = this;
		}
		
		private void detach_AspNetBranch_Classes(AspNetBranch_Class entity)
		{
			this.SendPropertyChanging();
			entity.AspNetSession = null;
		}
		
		private void attach_AspNetSessions(AspNetSession entity)
		{
			this.SendPropertyChanging();
			entity.AspNetSession1 = this;
		}
		
		private void detach_AspNetSessions(AspNetSession entity)
		{
			this.SendPropertyChanging();
			entity.AspNetSession1 = null;
		}
		
		private void attach_AspNetStudent_Enrollments(AspNetStudent_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetSession = this;
		}
		
		private void detach_AspNetStudent_Enrollments(AspNetStudent_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetSession = null;
		}
		
		private void attach_AspNetStudent_Histories(AspNetStudent_History entity)
		{
			this.SendPropertyChanging();
			entity.AspNetSession = this;
		}
		
		private void detach_AspNetStudent_Histories(AspNetStudent_History entity)
		{
			this.SendPropertyChanging();
			entity.AspNetSession = null;
		}
		
		private void attach_AspNetTeacher_Enrollments(AspNetTeacher_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetSession = this;
		}
		
		private void detach_AspNetTeacher_Enrollments(AspNetTeacher_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetSession = null;
		}
		
		private void attach_AspNetTeacher_Histories(AspNetTeacher_History entity)
		{
			this.SendPropertyChanging();
			entity.AspNetSession = this;
		}
		
		private void detach_AspNetTeacher_Histories(AspNetTeacher_History entity)
		{
			this.SendPropertyChanging();
			entity.AspNetSession = null;
		}
		
		private void attach_AspNetTerms(AspNetTerm entity)
		{
			this.SendPropertyChanging();
			entity.AspNetSession = this;
		}
		
		private void detach_AspNetTerms(AspNetTerm entity)
		{
			this.SendPropertyChanging();
			entity.AspNetSession = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetStatus")]
	public partial class AspNetStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<AspNetSession> _AspNetSessions;
		
		private EntitySet<AspNetStudentAssessment> _AspNetStudentAssessments;
		
		private EntitySet<AspNetUser> _AspNetUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AspNetStatus()
		{
			this._AspNetSessions = new EntitySet<AspNetSession>(new Action<AspNetSession>(this.attach_AspNetSessions), new Action<AspNetSession>(this.detach_AspNetSessions));
			this._AspNetStudentAssessments = new EntitySet<AspNetStudentAssessment>(new Action<AspNetStudentAssessment>(this.attach_AspNetStudentAssessments), new Action<AspNetStudentAssessment>(this.detach_AspNetStudentAssessments));
			this._AspNetUsers = new EntitySet<AspNetUser>(new Action<AspNetUser>(this.attach_AspNetUsers), new Action<AspNetUser>(this.detach_AspNetUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetStatus_AspNetSession", Storage="_AspNetSessions", ThisKey="Id", OtherKey="StatusId")]
		public EntitySet<AspNetSession> AspNetSessions
		{
			get
			{
				return this._AspNetSessions;
			}
			set
			{
				this._AspNetSessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetStatus_AspNetStudentAssessment", Storage="_AspNetStudentAssessments", ThisKey="Id", OtherKey="SubmissionStatusId")]
		public EntitySet<AspNetStudentAssessment> AspNetStudentAssessments
		{
			get
			{
				return this._AspNetStudentAssessments;
			}
			set
			{
				this._AspNetStudentAssessments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetStatus_AspNetUser", Storage="_AspNetUsers", ThisKey="Id", OtherKey="StatusId")]
		public EntitySet<AspNetUser> AspNetUsers
		{
			get
			{
				return this._AspNetUsers;
			}
			set
			{
				this._AspNetUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetSessions(AspNetSession entity)
		{
			this.SendPropertyChanging();
			entity.AspNetStatus = this;
		}
		
		private void detach_AspNetSessions(AspNetSession entity)
		{
			this.SendPropertyChanging();
			entity.AspNetStatus = null;
		}
		
		private void attach_AspNetStudentAssessments(AspNetStudentAssessment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetStatus = this;
		}
		
		private void detach_AspNetStudentAssessments(AspNetStudentAssessment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetStatus = null;
		}
		
		private void attach_AspNetUsers(AspNetUser entity)
		{
			this.SendPropertyChanging();
			entity.AspNetStatus = this;
		}
		
		private void detach_AspNetUsers(AspNetUser entity)
		{
			this.SendPropertyChanging();
			entity.AspNetStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetStudent_Enrollments")]
	public partial class AspNetStudent_Enrollment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _StudentId;
		
		private int _CourseId;
		
		private int _SectionId;
		
		private int _SessionId;
		
		private EntitySet<AspNetStudentAssessment> _AspNetStudentAssessments;
		
		private EntityRef<AspNetBranchClass_Section> _AspNetBranchClass_Section;
		
		private EntityRef<AspNetCourse> _AspNetCourse;
		
		private EntityRef<AspNetSession> _AspNetSession;
		
		private EntityRef<AspNetStudent> _AspNetStudent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStudentIdChanging(int value);
    partial void OnStudentIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnSectionIdChanging(int value);
    partial void OnSectionIdChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    #endregion
		
		public AspNetStudent_Enrollment()
		{
			this._AspNetStudentAssessments = new EntitySet<AspNetStudentAssessment>(new Action<AspNetStudentAssessment>(this.attach_AspNetStudentAssessments), new Action<AspNetStudentAssessment>(this.detach_AspNetStudentAssessments));
			this._AspNetBranchClass_Section = default(EntityRef<AspNetBranchClass_Section>);
			this._AspNetCourse = default(EntityRef<AspNetCourse>);
			this._AspNetSession = default(EntityRef<AspNetSession>);
			this._AspNetStudent = default(EntityRef<AspNetStudent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int NOT NULL")]
		public int StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._AspNetStudent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._AspNetCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionId", DbType="Int NOT NULL")]
		public int SectionId
		{
			get
			{
				return this._SectionId;
			}
			set
			{
				if ((this._SectionId != value))
				{
					if (this._AspNetBranchClass_Section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionIdChanging(value);
					this.SendPropertyChanging();
					this._SectionId = value;
					this.SendPropertyChanged("SectionId");
					this.OnSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL")]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._AspNetSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetStudent_Enrollment_AspNetStudentAssessment", Storage="_AspNetStudentAssessments", ThisKey="Id", OtherKey="StudentEnrollmentId")]
		public EntitySet<AspNetStudentAssessment> AspNetStudentAssessments
		{
			get
			{
				return this._AspNetStudentAssessments;
			}
			set
			{
				this._AspNetStudentAssessments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranchClass_Section_AspNetStudent_Enrollment", Storage="_AspNetBranchClass_Section", ThisKey="SectionId", OtherKey="Id", IsForeignKey=true)]
		public AspNetBranchClass_Section AspNetBranchClass_Section
		{
			get
			{
				return this._AspNetBranchClass_Section.Entity;
			}
			set
			{
				AspNetBranchClass_Section previousValue = this._AspNetBranchClass_Section.Entity;
				if (((previousValue != value) 
							|| (this._AspNetBranchClass_Section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetBranchClass_Section.Entity = null;
						previousValue.AspNetStudent_Enrollments.Remove(this);
					}
					this._AspNetBranchClass_Section.Entity = value;
					if ((value != null))
					{
						value.AspNetStudent_Enrollments.Add(this);
						this._SectionId = value.Id;
					}
					else
					{
						this._SectionId = default(int);
					}
					this.SendPropertyChanged("AspNetBranchClass_Section");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetCourse_AspNetStudent_Enrollment", Storage="_AspNetCourse", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true)]
		public AspNetCourse AspNetCourse
		{
			get
			{
				return this._AspNetCourse.Entity;
			}
			set
			{
				AspNetCourse previousValue = this._AspNetCourse.Entity;
				if (((previousValue != value) 
							|| (this._AspNetCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetCourse.Entity = null;
						previousValue.AspNetStudent_Enrollments.Remove(this);
					}
					this._AspNetCourse.Entity = value;
					if ((value != null))
					{
						value.AspNetStudent_Enrollments.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("AspNetCourse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetSession_AspNetStudent_Enrollment", Storage="_AspNetSession", ThisKey="SessionId", OtherKey="Id", IsForeignKey=true)]
		public AspNetSession AspNetSession
		{
			get
			{
				return this._AspNetSession.Entity;
			}
			set
			{
				AspNetSession previousValue = this._AspNetSession.Entity;
				if (((previousValue != value) 
							|| (this._AspNetSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetSession.Entity = null;
						previousValue.AspNetStudent_Enrollments.Remove(this);
					}
					this._AspNetSession.Entity = value;
					if ((value != null))
					{
						value.AspNetStudent_Enrollments.Add(this);
						this._SessionId = value.Id;
					}
					else
					{
						this._SessionId = default(int);
					}
					this.SendPropertyChanged("AspNetSession");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetStudent_AspNetStudent_Enrollment", Storage="_AspNetStudent", ThisKey="StudentId", OtherKey="Id", IsForeignKey=true)]
		public AspNetStudent AspNetStudent
		{
			get
			{
				return this._AspNetStudent.Entity;
			}
			set
			{
				AspNetStudent previousValue = this._AspNetStudent.Entity;
				if (((previousValue != value) 
							|| (this._AspNetStudent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetStudent.Entity = null;
						previousValue.AspNetStudent_Enrollments.Remove(this);
					}
					this._AspNetStudent.Entity = value;
					if ((value != null))
					{
						value.AspNetStudent_Enrollments.Add(this);
						this._StudentId = value.Id;
					}
					else
					{
						this._StudentId = default(int);
					}
					this.SendPropertyChanged("AspNetStudent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetStudentAssessments(AspNetStudentAssessment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetStudent_Enrollment = this;
		}
		
		private void detach_AspNetStudentAssessments(AspNetStudentAssessment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetStudent_Enrollment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetStudent_Histories")]
	public partial class AspNetStudent_History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _StudentId;
		
		private System.Nullable<int> _SessionId;
		
		private System.Nullable<int> _SectionId;
		
		private System.Nullable<bool> _AdmissionStatusId;
		
		private System.Nullable<int> _CourseId;
		
		private EntityRef<AspNetCourse> _AspNetCourse;
		
		private EntityRef<AspNetBranchClass_Section> _AspNetBranchClass_Section;
		
		private EntityRef<AspNetSession> _AspNetSession;
		
		private EntityRef<AspNetStudent> _AspNetStudent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStudentIdChanging(System.Nullable<int> value);
    partial void OnStudentIdChanged();
    partial void OnSessionIdChanging(System.Nullable<int> value);
    partial void OnSessionIdChanged();
    partial void OnSectionIdChanging(System.Nullable<int> value);
    partial void OnSectionIdChanged();
    partial void OnAdmissionStatusIdChanging(System.Nullable<bool> value);
    partial void OnAdmissionStatusIdChanged();
    partial void OnCourseIdChanging(System.Nullable<int> value);
    partial void OnCourseIdChanged();
    #endregion
		
		public AspNetStudent_History()
		{
			this._AspNetCourse = default(EntityRef<AspNetCourse>);
			this._AspNetBranchClass_Section = default(EntityRef<AspNetBranchClass_Section>);
			this._AspNetSession = default(EntityRef<AspNetSession>);
			this._AspNetStudent = default(EntityRef<AspNetStudent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int")]
		public System.Nullable<int> StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._AspNetStudent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int")]
		public System.Nullable<int> SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._AspNetSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionId", DbType="Int")]
		public System.Nullable<int> SectionId
		{
			get
			{
				return this._SectionId;
			}
			set
			{
				if ((this._SectionId != value))
				{
					if (this._AspNetBranchClass_Section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionIdChanging(value);
					this.SendPropertyChanging();
					this._SectionId = value;
					this.SendPropertyChanged("SectionId");
					this.OnSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdmissionStatusId", DbType="Bit")]
		public System.Nullable<bool> AdmissionStatusId
		{
			get
			{
				return this._AdmissionStatusId;
			}
			set
			{
				if ((this._AdmissionStatusId != value))
				{
					this.OnAdmissionStatusIdChanging(value);
					this.SendPropertyChanging();
					this._AdmissionStatusId = value;
					this.SendPropertyChanged("AdmissionStatusId");
					this.OnAdmissionStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int")]
		public System.Nullable<int> CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._AspNetCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetCourse_AspNetStudent_History", Storage="_AspNetCourse", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true)]
		public AspNetCourse AspNetCourse
		{
			get
			{
				return this._AspNetCourse.Entity;
			}
			set
			{
				AspNetCourse previousValue = this._AspNetCourse.Entity;
				if (((previousValue != value) 
							|| (this._AspNetCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetCourse.Entity = null;
						previousValue.AspNetStudent_Histories.Remove(this);
					}
					this._AspNetCourse.Entity = value;
					if ((value != null))
					{
						value.AspNetStudent_Histories.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AspNetCourse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranchClass_Section_AspNetStudent_History", Storage="_AspNetBranchClass_Section", ThisKey="SectionId", OtherKey="Id", IsForeignKey=true)]
		public AspNetBranchClass_Section AspNetBranchClass_Section
		{
			get
			{
				return this._AspNetBranchClass_Section.Entity;
			}
			set
			{
				AspNetBranchClass_Section previousValue = this._AspNetBranchClass_Section.Entity;
				if (((previousValue != value) 
							|| (this._AspNetBranchClass_Section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetBranchClass_Section.Entity = null;
						previousValue.AspNetStudent_Histories.Remove(this);
					}
					this._AspNetBranchClass_Section.Entity = value;
					if ((value != null))
					{
						value.AspNetStudent_Histories.Add(this);
						this._SectionId = value.Id;
					}
					else
					{
						this._SectionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AspNetBranchClass_Section");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetSession_AspNetStudent_History", Storage="_AspNetSession", ThisKey="SessionId", OtherKey="Id", IsForeignKey=true)]
		public AspNetSession AspNetSession
		{
			get
			{
				return this._AspNetSession.Entity;
			}
			set
			{
				AspNetSession previousValue = this._AspNetSession.Entity;
				if (((previousValue != value) 
							|| (this._AspNetSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetSession.Entity = null;
						previousValue.AspNetStudent_Histories.Remove(this);
					}
					this._AspNetSession.Entity = value;
					if ((value != null))
					{
						value.AspNetStudent_Histories.Add(this);
						this._SessionId = value.Id;
					}
					else
					{
						this._SessionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AspNetSession");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetStudent_AspNetStudent_History", Storage="_AspNetStudent", ThisKey="StudentId", OtherKey="Id", IsForeignKey=true)]
		public AspNetStudent AspNetStudent
		{
			get
			{
				return this._AspNetStudent.Entity;
			}
			set
			{
				AspNetStudent previousValue = this._AspNetStudent.Entity;
				if (((previousValue != value) 
							|| (this._AspNetStudent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetStudent.Entity = null;
						previousValue.AspNetStudent_Histories.Remove(this);
					}
					this._AspNetStudent.Entity = value;
					if ((value != null))
					{
						value.AspNetStudent_Histories.Add(this);
						this._StudentId = value.Id;
					}
					else
					{
						this._StudentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AspNetStudent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetStudentAssessments")]
	public partial class AspNetStudentAssessment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _StudentEnrollmentId;
		
		private decimal _ObtainedMarks;
		
		private int _SubmissionStatusId;
		
		private int _AssessmentId;
		
		private string _AssessmmentSolutionFile;
		
		private EntityRef<AspNetAssessment> _AspNetAssessment;
		
		private EntityRef<AspNetStatus> _AspNetStatus;
		
		private EntityRef<AspNetStudent_Enrollment> _AspNetStudent_Enrollment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStudentEnrollmentIdChanging(int value);
    partial void OnStudentEnrollmentIdChanged();
    partial void OnObtainedMarksChanging(decimal value);
    partial void OnObtainedMarksChanged();
    partial void OnSubmissionStatusIdChanging(int value);
    partial void OnSubmissionStatusIdChanged();
    partial void OnAssessmentIdChanging(int value);
    partial void OnAssessmentIdChanged();
    partial void OnAssessmmentSolutionFileChanging(string value);
    partial void OnAssessmmentSolutionFileChanged();
    #endregion
		
		public AspNetStudentAssessment()
		{
			this._AspNetAssessment = default(EntityRef<AspNetAssessment>);
			this._AspNetStatus = default(EntityRef<AspNetStatus>);
			this._AspNetStudent_Enrollment = default(EntityRef<AspNetStudent_Enrollment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentEnrollmentId", DbType="Int NOT NULL")]
		public int StudentEnrollmentId
		{
			get
			{
				return this._StudentEnrollmentId;
			}
			set
			{
				if ((this._StudentEnrollmentId != value))
				{
					if (this._AspNetStudent_Enrollment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentEnrollmentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentEnrollmentId = value;
					this.SendPropertyChanged("StudentEnrollmentId");
					this.OnStudentEnrollmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObtainedMarks", DbType="Decimal(5,2) NOT NULL")]
		public decimal ObtainedMarks
		{
			get
			{
				return this._ObtainedMarks;
			}
			set
			{
				if ((this._ObtainedMarks != value))
				{
					this.OnObtainedMarksChanging(value);
					this.SendPropertyChanging();
					this._ObtainedMarks = value;
					this.SendPropertyChanged("ObtainedMarks");
					this.OnObtainedMarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionStatusId", DbType="Int NOT NULL")]
		public int SubmissionStatusId
		{
			get
			{
				return this._SubmissionStatusId;
			}
			set
			{
				if ((this._SubmissionStatusId != value))
				{
					if (this._AspNetStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmissionStatusIdChanging(value);
					this.SendPropertyChanging();
					this._SubmissionStatusId = value;
					this.SendPropertyChanged("SubmissionStatusId");
					this.OnSubmissionStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentId", DbType="Int NOT NULL")]
		public int AssessmentId
		{
			get
			{
				return this._AssessmentId;
			}
			set
			{
				if ((this._AssessmentId != value))
				{
					if (this._AspNetAssessment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssessmentIdChanging(value);
					this.SendPropertyChanging();
					this._AssessmentId = value;
					this.SendPropertyChanged("AssessmentId");
					this.OnAssessmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmmentSolutionFile", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AssessmmentSolutionFile
		{
			get
			{
				return this._AssessmmentSolutionFile;
			}
			set
			{
				if ((this._AssessmmentSolutionFile != value))
				{
					this.OnAssessmmentSolutionFileChanging(value);
					this.SendPropertyChanging();
					this._AssessmmentSolutionFile = value;
					this.SendPropertyChanged("AssessmmentSolutionFile");
					this.OnAssessmmentSolutionFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetAssessment_AspNetStudentAssessment", Storage="_AspNetAssessment", ThisKey="AssessmentId", OtherKey="Id", IsForeignKey=true)]
		public AspNetAssessment AspNetAssessment
		{
			get
			{
				return this._AspNetAssessment.Entity;
			}
			set
			{
				AspNetAssessment previousValue = this._AspNetAssessment.Entity;
				if (((previousValue != value) 
							|| (this._AspNetAssessment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetAssessment.Entity = null;
						previousValue.AspNetStudentAssessments.Remove(this);
					}
					this._AspNetAssessment.Entity = value;
					if ((value != null))
					{
						value.AspNetStudentAssessments.Add(this);
						this._AssessmentId = value.Id;
					}
					else
					{
						this._AssessmentId = default(int);
					}
					this.SendPropertyChanged("AspNetAssessment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetStatus_AspNetStudentAssessment", Storage="_AspNetStatus", ThisKey="SubmissionStatusId", OtherKey="Id", IsForeignKey=true)]
		public AspNetStatus AspNetStatus
		{
			get
			{
				return this._AspNetStatus.Entity;
			}
			set
			{
				AspNetStatus previousValue = this._AspNetStatus.Entity;
				if (((previousValue != value) 
							|| (this._AspNetStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetStatus.Entity = null;
						previousValue.AspNetStudentAssessments.Remove(this);
					}
					this._AspNetStatus.Entity = value;
					if ((value != null))
					{
						value.AspNetStudentAssessments.Add(this);
						this._SubmissionStatusId = value.Id;
					}
					else
					{
						this._SubmissionStatusId = default(int);
					}
					this.SendPropertyChanged("AspNetStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetStudent_Enrollment_AspNetStudentAssessment", Storage="_AspNetStudent_Enrollment", ThisKey="StudentEnrollmentId", OtherKey="Id", IsForeignKey=true)]
		public AspNetStudent_Enrollment AspNetStudent_Enrollment
		{
			get
			{
				return this._AspNetStudent_Enrollment.Entity;
			}
			set
			{
				AspNetStudent_Enrollment previousValue = this._AspNetStudent_Enrollment.Entity;
				if (((previousValue != value) 
							|| (this._AspNetStudent_Enrollment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetStudent_Enrollment.Entity = null;
						previousValue.AspNetStudentAssessments.Remove(this);
					}
					this._AspNetStudent_Enrollment.Entity = value;
					if ((value != null))
					{
						value.AspNetStudentAssessments.Add(this);
						this._StudentEnrollmentId = value.Id;
					}
					else
					{
						this._StudentEnrollmentId = default(int);
					}
					this.SendPropertyChanged("AspNetStudent_Enrollment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetStudents")]
	public partial class AspNetStudent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _RollNo;
		
		private string _UserId;
		
		private int _BranchId;
		
		private string _Address;
		
		private string _File;
		
		private System.Nullable<int> _ParentId;
		
		private EntitySet<AspNetStudent_Enrollment> _AspNetStudent_Enrollments;
		
		private EntitySet<AspNetStudent_History> _AspNetStudent_Histories;
		
		private EntitySet<AspNetStudentSection> _AspNetStudentSections;
		
		private EntityRef<AspNetBranch> _AspNetBranch;
		
		private EntityRef<AspNetParent> _AspNetParent;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRollNoChanging(string value);
    partial void OnRollNoChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnBranchIdChanging(int value);
    partial void OnBranchIdChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnFileChanging(string value);
    partial void OnFileChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    #endregion
		
		public AspNetStudent()
		{
			this._AspNetStudent_Enrollments = new EntitySet<AspNetStudent_Enrollment>(new Action<AspNetStudent_Enrollment>(this.attach_AspNetStudent_Enrollments), new Action<AspNetStudent_Enrollment>(this.detach_AspNetStudent_Enrollments));
			this._AspNetStudent_Histories = new EntitySet<AspNetStudent_History>(new Action<AspNetStudent_History>(this.attach_AspNetStudent_Histories), new Action<AspNetStudent_History>(this.detach_AspNetStudent_Histories));
			this._AspNetStudentSections = new EntitySet<AspNetStudentSection>(new Action<AspNetStudentSection>(this.attach_AspNetStudentSections), new Action<AspNetStudentSection>(this.detach_AspNetStudentSections));
			this._AspNetBranch = default(EntityRef<AspNetBranch>);
			this._AspNetParent = default(EntityRef<AspNetParent>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RollNo", DbType="NVarChar(31) NOT NULL", CanBeNull=false)]
		public string RollNo
		{
			get
			{
				return this._RollNo;
			}
			set
			{
				if ((this._RollNo != value))
				{
					this.OnRollNoChanging(value);
					this.SendPropertyChanging();
					this._RollNo = value;
					this.SendPropertyChanged("RollNo");
					this.OnRollNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchId", DbType="Int NOT NULL")]
		public int BranchId
		{
			get
			{
				return this._BranchId;
			}
			set
			{
				if ((this._BranchId != value))
				{
					if (this._AspNetBranch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchIdChanging(value);
					this.SendPropertyChanging();
					this._BranchId = value;
					this.SendPropertyChanged("BranchId");
					this.OnBranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(512)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[File]", Storage="_File", DbType="NVarChar(256)")]
		public string File
		{
			get
			{
				return this._File;
			}
			set
			{
				if ((this._File != value))
				{
					this.OnFileChanging(value);
					this.SendPropertyChanging();
					this._File = value;
					this.SendPropertyChanged("File");
					this.OnFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int")]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._AspNetParent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetStudent_AspNetStudent_Enrollment", Storage="_AspNetStudent_Enrollments", ThisKey="Id", OtherKey="StudentId")]
		public EntitySet<AspNetStudent_Enrollment> AspNetStudent_Enrollments
		{
			get
			{
				return this._AspNetStudent_Enrollments;
			}
			set
			{
				this._AspNetStudent_Enrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetStudent_AspNetStudent_History", Storage="_AspNetStudent_Histories", ThisKey="Id", OtherKey="StudentId")]
		public EntitySet<AspNetStudent_History> AspNetStudent_Histories
		{
			get
			{
				return this._AspNetStudent_Histories;
			}
			set
			{
				this._AspNetStudent_Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetStudent_AspNetStudentSection", Storage="_AspNetStudentSections", ThisKey="Id", OtherKey="StudentId")]
		public EntitySet<AspNetStudentSection> AspNetStudentSections
		{
			get
			{
				return this._AspNetStudentSections;
			}
			set
			{
				this._AspNetStudentSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranch_AspNetStudent", Storage="_AspNetBranch", ThisKey="BranchId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetBranch AspNetBranch
		{
			get
			{
				return this._AspNetBranch.Entity;
			}
			set
			{
				AspNetBranch previousValue = this._AspNetBranch.Entity;
				if (((previousValue != value) 
							|| (this._AspNetBranch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetBranch.Entity = null;
						previousValue.AspNetStudents.Remove(this);
					}
					this._AspNetBranch.Entity = value;
					if ((value != null))
					{
						value.AspNetStudents.Add(this);
						this._BranchId = value.Id;
					}
					else
					{
						this._BranchId = default(int);
					}
					this.SendPropertyChanged("AspNetBranch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetParent_AspNetStudent", Storage="_AspNetParent", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public AspNetParent AspNetParent
		{
			get
			{
				return this._AspNetParent.Entity;
			}
			set
			{
				AspNetParent previousValue = this._AspNetParent.Entity;
				if (((previousValue != value) 
							|| (this._AspNetParent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetParent.Entity = null;
						previousValue.AspNetStudents.Remove(this);
					}
					this._AspNetParent.Entity = value;
					if ((value != null))
					{
						value.AspNetStudents.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AspNetParent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetStudent", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetStudents.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetStudents.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetStudent_Enrollments(AspNetStudent_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetStudent = this;
		}
		
		private void detach_AspNetStudent_Enrollments(AspNetStudent_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetStudent = null;
		}
		
		private void attach_AspNetStudent_Histories(AspNetStudent_History entity)
		{
			this.SendPropertyChanging();
			entity.AspNetStudent = this;
		}
		
		private void detach_AspNetStudent_Histories(AspNetStudent_History entity)
		{
			this.SendPropertyChanging();
			entity.AspNetStudent = null;
		}
		
		private void attach_AspNetStudentSections(AspNetStudentSection entity)
		{
			this.SendPropertyChanging();
			entity.AspNetStudent = this;
		}
		
		private void detach_AspNetStudentSections(AspNetStudentSection entity)
		{
			this.SendPropertyChanging();
			entity.AspNetStudent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetStudentSection")]
	public partial class AspNetStudentSection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _StudentId;
		
		private int _BranchClassSectionId;
		
		private EntityRef<AspNetBranchClass_Section> _AspNetBranchClass_Section;
		
		private EntityRef<AspNetStudent> _AspNetStudent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStudentIdChanging(int value);
    partial void OnStudentIdChanged();
    partial void OnBranchClassSectionIdChanging(int value);
    partial void OnBranchClassSectionIdChanged();
    #endregion
		
		public AspNetStudentSection()
		{
			this._AspNetBranchClass_Section = default(EntityRef<AspNetBranchClass_Section>);
			this._AspNetStudent = default(EntityRef<AspNetStudent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int NOT NULL")]
		public int StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._AspNetStudent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchClassSectionId", DbType="Int NOT NULL")]
		public int BranchClassSectionId
		{
			get
			{
				return this._BranchClassSectionId;
			}
			set
			{
				if ((this._BranchClassSectionId != value))
				{
					if (this._AspNetBranchClass_Section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchClassSectionIdChanging(value);
					this.SendPropertyChanging();
					this._BranchClassSectionId = value;
					this.SendPropertyChanged("BranchClassSectionId");
					this.OnBranchClassSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranchClass_Section_AspNetStudentSection", Storage="_AspNetBranchClass_Section", ThisKey="BranchClassSectionId", OtherKey="Id", IsForeignKey=true)]
		public AspNetBranchClass_Section AspNetBranchClass_Section
		{
			get
			{
				return this._AspNetBranchClass_Section.Entity;
			}
			set
			{
				AspNetBranchClass_Section previousValue = this._AspNetBranchClass_Section.Entity;
				if (((previousValue != value) 
							|| (this._AspNetBranchClass_Section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetBranchClass_Section.Entity = null;
						previousValue.AspNetStudentSections.Remove(this);
					}
					this._AspNetBranchClass_Section.Entity = value;
					if ((value != null))
					{
						value.AspNetStudentSections.Add(this);
						this._BranchClassSectionId = value.Id;
					}
					else
					{
						this._BranchClassSectionId = default(int);
					}
					this.SendPropertyChanged("AspNetBranchClass_Section");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetStudent_AspNetStudentSection", Storage="_AspNetStudent", ThisKey="StudentId", OtherKey="Id", IsForeignKey=true)]
		public AspNetStudent AspNetStudent
		{
			get
			{
				return this._AspNetStudent.Entity;
			}
			set
			{
				AspNetStudent previousValue = this._AspNetStudent.Entity;
				if (((previousValue != value) 
							|| (this._AspNetStudent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetStudent.Entity = null;
						previousValue.AspNetStudentSections.Remove(this);
					}
					this._AspNetStudent.Entity = value;
					if ((value != null))
					{
						value.AspNetStudentSections.Add(this);
						this._StudentId = value.Id;
					}
					else
					{
						this._StudentId = default(int);
					}
					this.SendPropertyChanged("AspNetStudent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetTeacher_Enrollments")]
	public partial class AspNetTeacher_Enrollment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TeacherId;
		
		private int _CourseId;
		
		private int _SectionId;
		
		private int _SessionId;
		
		private EntityRef<AspNetCourse> _AspNetCourse;
		
		private EntityRef<AspNetBranchClass_Section> _AspNetBranchClass_Section;
		
		private EntityRef<AspNetSession> _AspNetSession;
		
		private EntityRef<AspNetTeacher> _AspNetTeacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTeacherIdChanging(int value);
    partial void OnTeacherIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnSectionIdChanging(int value);
    partial void OnSectionIdChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    #endregion
		
		public AspNetTeacher_Enrollment()
		{
			this._AspNetCourse = default(EntityRef<AspNetCourse>);
			this._AspNetBranchClass_Section = default(EntityRef<AspNetBranchClass_Section>);
			this._AspNetSession = default(EntityRef<AspNetSession>);
			this._AspNetTeacher = default(EntityRef<AspNetTeacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="Int NOT NULL")]
		public int TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._AspNetTeacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._AspNetCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionId", DbType="Int NOT NULL")]
		public int SectionId
		{
			get
			{
				return this._SectionId;
			}
			set
			{
				if ((this._SectionId != value))
				{
					if (this._AspNetBranchClass_Section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionIdChanging(value);
					this.SendPropertyChanging();
					this._SectionId = value;
					this.SendPropertyChanged("SectionId");
					this.OnSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL")]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._AspNetSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetCourse_AspNetTeacher_Enrollment", Storage="_AspNetCourse", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true)]
		public AspNetCourse AspNetCourse
		{
			get
			{
				return this._AspNetCourse.Entity;
			}
			set
			{
				AspNetCourse previousValue = this._AspNetCourse.Entity;
				if (((previousValue != value) 
							|| (this._AspNetCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetCourse.Entity = null;
						previousValue.AspNetTeacher_Enrollments.Remove(this);
					}
					this._AspNetCourse.Entity = value;
					if ((value != null))
					{
						value.AspNetTeacher_Enrollments.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("AspNetCourse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranchClass_Section_AspNetTeacher_Enrollment", Storage="_AspNetBranchClass_Section", ThisKey="SectionId", OtherKey="Id", IsForeignKey=true)]
		public AspNetBranchClass_Section AspNetBranchClass_Section
		{
			get
			{
				return this._AspNetBranchClass_Section.Entity;
			}
			set
			{
				AspNetBranchClass_Section previousValue = this._AspNetBranchClass_Section.Entity;
				if (((previousValue != value) 
							|| (this._AspNetBranchClass_Section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetBranchClass_Section.Entity = null;
						previousValue.AspNetTeacher_Enrollments.Remove(this);
					}
					this._AspNetBranchClass_Section.Entity = value;
					if ((value != null))
					{
						value.AspNetTeacher_Enrollments.Add(this);
						this._SectionId = value.Id;
					}
					else
					{
						this._SectionId = default(int);
					}
					this.SendPropertyChanged("AspNetBranchClass_Section");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetSession_AspNetTeacher_Enrollment", Storage="_AspNetSession", ThisKey="SessionId", OtherKey="Id", IsForeignKey=true)]
		public AspNetSession AspNetSession
		{
			get
			{
				return this._AspNetSession.Entity;
			}
			set
			{
				AspNetSession previousValue = this._AspNetSession.Entity;
				if (((previousValue != value) 
							|| (this._AspNetSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetSession.Entity = null;
						previousValue.AspNetTeacher_Enrollments.Remove(this);
					}
					this._AspNetSession.Entity = value;
					if ((value != null))
					{
						value.AspNetTeacher_Enrollments.Add(this);
						this._SessionId = value.Id;
					}
					else
					{
						this._SessionId = default(int);
					}
					this.SendPropertyChanged("AspNetSession");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetTeacher_AspNetTeacher_Enrollment", Storage="_AspNetTeacher", ThisKey="TeacherId", OtherKey="Id", IsForeignKey=true)]
		public AspNetTeacher AspNetTeacher
		{
			get
			{
				return this._AspNetTeacher.Entity;
			}
			set
			{
				AspNetTeacher previousValue = this._AspNetTeacher.Entity;
				if (((previousValue != value) 
							|| (this._AspNetTeacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetTeacher.Entity = null;
						previousValue.AspNetTeacher_Enrollments.Remove(this);
					}
					this._AspNetTeacher.Entity = value;
					if ((value != null))
					{
						value.AspNetTeacher_Enrollments.Add(this);
						this._TeacherId = value.Id;
					}
					else
					{
						this._TeacherId = default(int);
					}
					this.SendPropertyChanged("AspNetTeacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetTeacher_Histories")]
	public partial class AspNetTeacher_History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _TeachertId;
		
		private System.Nullable<int> _SessionId;
		
		private System.Nullable<int> _SectionId;
		
		private System.Nullable<bool> _AdmissionStatusId;
		
		private System.Nullable<int> _CourseId;
		
		private EntityRef<AspNetCourse> _AspNetCourse;
		
		private EntityRef<AspNetBranchClass_Section> _AspNetBranchClass_Section;
		
		private EntityRef<AspNetSession> _AspNetSession;
		
		private EntityRef<AspNetTeacher> _AspNetTeacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTeachertIdChanging(System.Nullable<int> value);
    partial void OnTeachertIdChanged();
    partial void OnSessionIdChanging(System.Nullable<int> value);
    partial void OnSessionIdChanged();
    partial void OnSectionIdChanging(System.Nullable<int> value);
    partial void OnSectionIdChanged();
    partial void OnAdmissionStatusIdChanging(System.Nullable<bool> value);
    partial void OnAdmissionStatusIdChanged();
    partial void OnCourseIdChanging(System.Nullable<int> value);
    partial void OnCourseIdChanged();
    #endregion
		
		public AspNetTeacher_History()
		{
			this._AspNetCourse = default(EntityRef<AspNetCourse>);
			this._AspNetBranchClass_Section = default(EntityRef<AspNetBranchClass_Section>);
			this._AspNetSession = default(EntityRef<AspNetSession>);
			this._AspNetTeacher = default(EntityRef<AspNetTeacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeachertId", DbType="Int")]
		public System.Nullable<int> TeachertId
		{
			get
			{
				return this._TeachertId;
			}
			set
			{
				if ((this._TeachertId != value))
				{
					if (this._AspNetTeacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeachertIdChanging(value);
					this.SendPropertyChanging();
					this._TeachertId = value;
					this.SendPropertyChanged("TeachertId");
					this.OnTeachertIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int")]
		public System.Nullable<int> SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._AspNetSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionId", DbType="Int")]
		public System.Nullable<int> SectionId
		{
			get
			{
				return this._SectionId;
			}
			set
			{
				if ((this._SectionId != value))
				{
					if (this._AspNetBranchClass_Section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionIdChanging(value);
					this.SendPropertyChanging();
					this._SectionId = value;
					this.SendPropertyChanged("SectionId");
					this.OnSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdmissionStatusId", DbType="Bit")]
		public System.Nullable<bool> AdmissionStatusId
		{
			get
			{
				return this._AdmissionStatusId;
			}
			set
			{
				if ((this._AdmissionStatusId != value))
				{
					this.OnAdmissionStatusIdChanging(value);
					this.SendPropertyChanging();
					this._AdmissionStatusId = value;
					this.SendPropertyChanged("AdmissionStatusId");
					this.OnAdmissionStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int")]
		public System.Nullable<int> CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._AspNetCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetCourse_AspNetTeacher_History", Storage="_AspNetCourse", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true)]
		public AspNetCourse AspNetCourse
		{
			get
			{
				return this._AspNetCourse.Entity;
			}
			set
			{
				AspNetCourse previousValue = this._AspNetCourse.Entity;
				if (((previousValue != value) 
							|| (this._AspNetCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetCourse.Entity = null;
						previousValue.AspNetTeacher_Histories.Remove(this);
					}
					this._AspNetCourse.Entity = value;
					if ((value != null))
					{
						value.AspNetTeacher_Histories.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AspNetCourse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetBranchClass_Section_AspNetTeacher_History", Storage="_AspNetBranchClass_Section", ThisKey="SectionId", OtherKey="Id", IsForeignKey=true)]
		public AspNetBranchClass_Section AspNetBranchClass_Section
		{
			get
			{
				return this._AspNetBranchClass_Section.Entity;
			}
			set
			{
				AspNetBranchClass_Section previousValue = this._AspNetBranchClass_Section.Entity;
				if (((previousValue != value) 
							|| (this._AspNetBranchClass_Section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetBranchClass_Section.Entity = null;
						previousValue.AspNetTeacher_Histories.Remove(this);
					}
					this._AspNetBranchClass_Section.Entity = value;
					if ((value != null))
					{
						value.AspNetTeacher_Histories.Add(this);
						this._SectionId = value.Id;
					}
					else
					{
						this._SectionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AspNetBranchClass_Section");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetSession_AspNetTeacher_History", Storage="_AspNetSession", ThisKey="SessionId", OtherKey="Id", IsForeignKey=true)]
		public AspNetSession AspNetSession
		{
			get
			{
				return this._AspNetSession.Entity;
			}
			set
			{
				AspNetSession previousValue = this._AspNetSession.Entity;
				if (((previousValue != value) 
							|| (this._AspNetSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetSession.Entity = null;
						previousValue.AspNetTeacher_Histories.Remove(this);
					}
					this._AspNetSession.Entity = value;
					if ((value != null))
					{
						value.AspNetTeacher_Histories.Add(this);
						this._SessionId = value.Id;
					}
					else
					{
						this._SessionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AspNetSession");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetTeacher_AspNetTeacher_History", Storage="_AspNetTeacher", ThisKey="TeachertId", OtherKey="Id", IsForeignKey=true)]
		public AspNetTeacher AspNetTeacher
		{
			get
			{
				return this._AspNetTeacher.Entity;
			}
			set
			{
				AspNetTeacher previousValue = this._AspNetTeacher.Entity;
				if (((previousValue != value) 
							|| (this._AspNetTeacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetTeacher.Entity = null;
						previousValue.AspNetTeacher_Histories.Remove(this);
					}
					this._AspNetTeacher.Entity = value;
					if ((value != null))
					{
						value.AspNetTeacher_Histories.Add(this);
						this._TeachertId = value.Id;
					}
					else
					{
						this._TeachertId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AspNetTeacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetTeachers")]
	public partial class AspNetTeacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserId;
		
		private string _RegistrationNo;
		
		private int _EmployeeId;
		
		private EntitySet<AspNetTeacher_Enrollment> _AspNetTeacher_Enrollments;
		
		private EntitySet<AspNetTeacher_History> _AspNetTeacher_Histories;
		
		private EntityRef<AspNetEmployee> _AspNetEmployee;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnRegistrationNoChanging(string value);
    partial void OnRegistrationNoChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    #endregion
		
		public AspNetTeacher()
		{
			this._AspNetTeacher_Enrollments = new EntitySet<AspNetTeacher_Enrollment>(new Action<AspNetTeacher_Enrollment>(this.attach_AspNetTeacher_Enrollments), new Action<AspNetTeacher_Enrollment>(this.detach_AspNetTeacher_Enrollments));
			this._AspNetTeacher_Histories = new EntitySet<AspNetTeacher_History>(new Action<AspNetTeacher_History>(this.attach_AspNetTeacher_Histories), new Action<AspNetTeacher_History>(this.detach_AspNetTeacher_Histories));
			this._AspNetEmployee = default(EntityRef<AspNetEmployee>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationNo", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string RegistrationNo
		{
			get
			{
				return this._RegistrationNo;
			}
			set
			{
				if ((this._RegistrationNo != value))
				{
					this.OnRegistrationNoChanging(value);
					this.SendPropertyChanging();
					this._RegistrationNo = value;
					this.SendPropertyChanged("RegistrationNo");
					this.OnRegistrationNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL")]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._AspNetEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetTeacher_AspNetTeacher_Enrollment", Storage="_AspNetTeacher_Enrollments", ThisKey="Id", OtherKey="TeacherId")]
		public EntitySet<AspNetTeacher_Enrollment> AspNetTeacher_Enrollments
		{
			get
			{
				return this._AspNetTeacher_Enrollments;
			}
			set
			{
				this._AspNetTeacher_Enrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetTeacher_AspNetTeacher_History", Storage="_AspNetTeacher_Histories", ThisKey="Id", OtherKey="TeachertId")]
		public EntitySet<AspNetTeacher_History> AspNetTeacher_Histories
		{
			get
			{
				return this._AspNetTeacher_Histories;
			}
			set
			{
				this._AspNetTeacher_Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetEmployee_AspNetTeacher", Storage="_AspNetEmployee", ThisKey="EmployeeId", OtherKey="Id", IsForeignKey=true)]
		public AspNetEmployee AspNetEmployee
		{
			get
			{
				return this._AspNetEmployee.Entity;
			}
			set
			{
				AspNetEmployee previousValue = this._AspNetEmployee.Entity;
				if (((previousValue != value) 
							|| (this._AspNetEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetEmployee.Entity = null;
						previousValue.AspNetTeachers.Remove(this);
					}
					this._AspNetEmployee.Entity = value;
					if ((value != null))
					{
						value.AspNetTeachers.Add(this);
						this._EmployeeId = value.Id;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("AspNetEmployee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetTeacher", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetTeachers.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetTeachers.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetTeacher_Enrollments(AspNetTeacher_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetTeacher = this;
		}
		
		private void detach_AspNetTeacher_Enrollments(AspNetTeacher_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetTeacher = null;
		}
		
		private void attach_AspNetTeacher_Histories(AspNetTeacher_History entity)
		{
			this.SendPropertyChanging();
			entity.AspNetTeacher = this;
		}
		
		private void detach_AspNetTeacher_Histories(AspNetTeacher_History entity)
		{
			this.SendPropertyChanging();
			entity.AspNetTeacher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetTerms")]
	public partial class AspNetTerm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private int _SessionId;
		
		private bool _IsActive;
		
		private EntitySet<AspNetAssessment> _AspNetAssessments;
		
		private EntityRef<AspNetSession> _AspNetSession;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public AspNetTerm()
		{
			this._AspNetAssessments = new EntitySet<AspNetAssessment>(new Action<AspNetAssessment>(this.attach_AspNetAssessments), new Action<AspNetAssessment>(this.detach_AspNetAssessments));
			this._AspNetSession = default(EntityRef<AspNetSession>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL")]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._AspNetSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetTerm_AspNetAssessment", Storage="_AspNetAssessments", ThisKey="Id", OtherKey="TermId")]
		public EntitySet<AspNetAssessment> AspNetAssessments
		{
			get
			{
				return this._AspNetAssessments;
			}
			set
			{
				this._AspNetAssessments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetSession_AspNetTerm", Storage="_AspNetSession", ThisKey="SessionId", OtherKey="Id", IsForeignKey=true)]
		public AspNetSession AspNetSession
		{
			get
			{
				return this._AspNetSession.Entity;
			}
			set
			{
				AspNetSession previousValue = this._AspNetSession.Entity;
				if (((previousValue != value) 
							|| (this._AspNetSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetSession.Entity = null;
						previousValue.AspNetTerms.Remove(this);
					}
					this._AspNetSession.Entity = value;
					if ((value != null))
					{
						value.AspNetTerms.Add(this);
						this._SessionId = value.Id;
					}
					else
					{
						this._SessionId = default(int);
					}
					this.SendPropertyChanged("AspNetSession");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetAssessments(AspNetAssessment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetTerm = this;
		}
		
		private void detach_AspNetAssessments(AspNetAssessment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetTerm = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserClaims")]
	public partial class AspNetUserClaim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserId;
		
		private string _ClaimType;
		
		private string _ClaimValue;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnClaimTypeChanging(string value);
    partial void OnClaimTypeChanged();
    partial void OnClaimValueChanging(string value);
    partial void OnClaimValueChanged();
    #endregion
		
		public AspNetUserClaim()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType", DbType="NVarChar(MAX)")]
		public string ClaimType
		{
			get
			{
				return this._ClaimType;
			}
			set
			{
				if ((this._ClaimType != value))
				{
					this.OnClaimTypeChanging(value);
					this.SendPropertyChanging();
					this._ClaimType = value;
					this.SendPropertyChanged("ClaimType");
					this.OnClaimTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimValue", DbType="NVarChar(MAX)")]
		public string ClaimValue
		{
			get
			{
				return this._ClaimValue;
			}
			set
			{
				if ((this._ClaimValue != value))
				{
					this.OnClaimValueChanging(value);
					this.SendPropertyChanging();
					this._ClaimValue = value;
					this.SendPropertyChanged("ClaimValue");
					this.OnClaimValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserClaim", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserClaims.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserClaims.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserLogins")]
	public partial class AspNetUserLogin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoginProvider;
		
		private string _ProviderKey;
		
		private string _UserId;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginProviderChanging(string value);
    partial void OnLoginProviderChanged();
    partial void OnProviderKeyChanging(string value);
    partial void OnProviderKeyChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    #endregion
		
		public AspNetUserLogin()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginProvider", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoginProvider
		{
			get
			{
				return this._LoginProvider;
			}
			set
			{
				if ((this._LoginProvider != value))
				{
					this.OnLoginProviderChanging(value);
					this.SendPropertyChanging();
					this._LoginProvider = value;
					this.SendPropertyChanged("LoginProvider");
					this.OnLoginProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderKey", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProviderKey
		{
			get
			{
				return this._ProviderKey;
			}
			set
			{
				if ((this._ProviderKey != value))
				{
					this.OnProviderKeyChanging(value);
					this.SendPropertyChanging();
					this._ProviderKey = value;
					this.SendPropertyChanged("ProviderKey");
					this.OnProviderKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserLogin", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserLogins.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserLogins.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserRoles")]
	public partial class AspNetUserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserId;
		
		private string _RoleId;
		
		private EntityRef<AspNetRole> _AspNetRole;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(string value);
    partial void OnRoleIdChanged();
    #endregion
		
		public AspNetUserRole()
		{
			this._AspNetRole = default(EntityRef<AspNetRole>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._AspNetRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_AspNetUserRole", Storage="_AspNetRole", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetRole AspNetRole
		{
			get
			{
				return this._AspNetRole.Entity;
			}
			set
			{
				AspNetRole previousValue = this._AspNetRole.Entity;
				if (((previousValue != value) 
							|| (this._AspNetRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetRole.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetRole.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(string);
					}
					this.SendPropertyChanged("AspNetRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserRole", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUsers")]
	public partial class AspNetUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Email;
		
		private System.Nullable<bool> _EmailConfirmed;
		
		private string _PasswordHash;
		
		private string _SecurityStamp;
		
		private string _PhoneNumber;
		
		private System.Nullable<bool> _PhoneNumberConfirmed;
		
		private System.Nullable<bool> _TwoFactorEnabled;
		
		private System.Nullable<System.DateTime> _LockoutEndDateUtc;
		
		private System.Nullable<bool> _LockoutEnabled;
		
		private System.Nullable<int> _AccessFailedCount;
		
		private string _UserName;
		
		private string _Name;
		
		private System.Nullable<int> _StatusId;
		
		private EntitySet<AspNetAccountant> _AspNetAccountants;
		
		private EntitySet<AspNetBranch_Admin> _AspNetBranch_Admins;
		
		private EntitySet<AspNetBranch> _AspNetBranches;
		
		private EntitySet<AspNetDepartment> _AspNetDepartments;
		
		private EntitySet<AspNetLog> _AspNetLogs;
		
		private EntitySet<AspNetParent> _AspNetParents;
		
		private EntitySet<AspNetStudent> _AspNetStudents;
		
		private EntitySet<AspNetTeacher> _AspNetTeachers;
		
		private EntitySet<AspNetUserClaim> _AspNetUserClaims;
		
		private EntitySet<AspNetUserLogin> _AspNetUserLogins;
		
		private EntitySet<AspNetUserRole> _AspNetUserRoles;
		
		private EntityRef<AspNetStatus> _AspNetStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailConfirmedChanging(System.Nullable<bool> value);
    partial void OnEmailConfirmedChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberConfirmedChanging(System.Nullable<bool> value);
    partial void OnPhoneNumberConfirmedChanged();
    partial void OnTwoFactorEnabledChanging(System.Nullable<bool> value);
    partial void OnTwoFactorEnabledChanged();
    partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLockoutEndDateUtcChanged();
    partial void OnLockoutEnabledChanging(System.Nullable<bool> value);
    partial void OnLockoutEnabledChanged();
    partial void OnAccessFailedCountChanging(System.Nullable<int> value);
    partial void OnAccessFailedCountChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStatusIdChanging(System.Nullable<int> value);
    partial void OnStatusIdChanged();
    #endregion
		
		public AspNetUser()
		{
			this._AspNetAccountants = new EntitySet<AspNetAccountant>(new Action<AspNetAccountant>(this.attach_AspNetAccountants), new Action<AspNetAccountant>(this.detach_AspNetAccountants));
			this._AspNetBranch_Admins = new EntitySet<AspNetBranch_Admin>(new Action<AspNetBranch_Admin>(this.attach_AspNetBranch_Admins), new Action<AspNetBranch_Admin>(this.detach_AspNetBranch_Admins));
			this._AspNetBranches = new EntitySet<AspNetBranch>(new Action<AspNetBranch>(this.attach_AspNetBranches), new Action<AspNetBranch>(this.detach_AspNetBranches));
			this._AspNetDepartments = new EntitySet<AspNetDepartment>(new Action<AspNetDepartment>(this.attach_AspNetDepartments), new Action<AspNetDepartment>(this.detach_AspNetDepartments));
			this._AspNetLogs = new EntitySet<AspNetLog>(new Action<AspNetLog>(this.attach_AspNetLogs), new Action<AspNetLog>(this.detach_AspNetLogs));
			this._AspNetParents = new EntitySet<AspNetParent>(new Action<AspNetParent>(this.attach_AspNetParents), new Action<AspNetParent>(this.detach_AspNetParents));
			this._AspNetStudents = new EntitySet<AspNetStudent>(new Action<AspNetStudent>(this.attach_AspNetStudents), new Action<AspNetStudent>(this.detach_AspNetStudents));
			this._AspNetTeachers = new EntitySet<AspNetTeacher>(new Action<AspNetTeacher>(this.attach_AspNetTeachers), new Action<AspNetTeacher>(this.detach_AspNetTeachers));
			this._AspNetUserClaims = new EntitySet<AspNetUserClaim>(new Action<AspNetUserClaim>(this.attach_AspNetUserClaims), new Action<AspNetUserClaim>(this.detach_AspNetUserClaims));
			this._AspNetUserLogins = new EntitySet<AspNetUserLogin>(new Action<AspNetUserLogin>(this.attach_AspNetUserLogins), new Action<AspNetUserLogin>(this.detach_AspNetUserLogins));
			this._AspNetUserRoles = new EntitySet<AspNetUserRole>(new Action<AspNetUserRole>(this.attach_AspNetUserRoles), new Action<AspNetUserRole>(this.detach_AspNetUserRoles));
			this._AspNetStatus = default(EntityRef<AspNetStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit")]
		public System.Nullable<bool> EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberConfirmed", DbType="Bit")]
		public System.Nullable<bool> PhoneNumberConfirmed
		{
			get
			{
				return this._PhoneNumberConfirmed;
			}
			set
			{
				if ((this._PhoneNumberConfirmed != value))
				{
					this.OnPhoneNumberConfirmedChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberConfirmed = value;
					this.SendPropertyChanged("PhoneNumberConfirmed");
					this.OnPhoneNumberConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit")]
		public System.Nullable<bool> TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this.OnTwoFactorEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorEnabled = value;
					this.SendPropertyChanged("TwoFactorEnabled");
					this.OnTwoFactorEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEndDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockoutEndDateUtc
		{
			get
			{
				return this._LockoutEndDateUtc;
			}
			set
			{
				if ((this._LockoutEndDateUtc != value))
				{
					this.OnLockoutEndDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LockoutEndDateUtc = value;
					this.SendPropertyChanged("LockoutEndDateUtc");
					this.OnLockoutEndDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit")]
		public System.Nullable<bool> LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this.OnLockoutEnabledChanging(value);
					this.SendPropertyChanging();
					this._LockoutEnabled = value;
					this.SendPropertyChanged("LockoutEnabled");
					this.OnLockoutEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFailedCount", DbType="Int")]
		public System.Nullable<int> AccessFailedCount
		{
			get
			{
				return this._AccessFailedCount;
			}
			set
			{
				if ((this._AccessFailedCount != value))
				{
					this.OnAccessFailedCountChanging(value);
					this.SendPropertyChanging();
					this._AccessFailedCount = value;
					this.SendPropertyChanged("AccessFailedCount");
					this.OnAccessFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", DbType="Int")]
		public System.Nullable<int> StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					if (this._AspNetStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetAccountant", Storage="_AspNetAccountants", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetAccountant> AspNetAccountants
		{
			get
			{
				return this._AspNetAccountants;
			}
			set
			{
				this._AspNetAccountants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetBranch_Admin", Storage="_AspNetBranch_Admins", ThisKey="Id", OtherKey="AdminId")]
		public EntitySet<AspNetBranch_Admin> AspNetBranch_Admins
		{
			get
			{
				return this._AspNetBranch_Admins;
			}
			set
			{
				this._AspNetBranch_Admins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetBranch", Storage="_AspNetBranches", ThisKey="Id", OtherKey="BranchPrincipalId")]
		public EntitySet<AspNetBranch> AspNetBranches
		{
			get
			{
				return this._AspNetBranches;
			}
			set
			{
				this._AspNetBranches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetDepartment", Storage="_AspNetDepartments", ThisKey="Id", OtherKey="HeadId")]
		public EntitySet<AspNetDepartment> AspNetDepartments
		{
			get
			{
				return this._AspNetDepartments;
			}
			set
			{
				this._AspNetDepartments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetLog", Storage="_AspNetLogs", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetLog> AspNetLogs
		{
			get
			{
				return this._AspNetLogs;
			}
			set
			{
				this._AspNetLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetParent", Storage="_AspNetParents", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetParent> AspNetParents
		{
			get
			{
				return this._AspNetParents;
			}
			set
			{
				this._AspNetParents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetStudent", Storage="_AspNetStudents", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetStudent> AspNetStudents
		{
			get
			{
				return this._AspNetStudents;
			}
			set
			{
				this._AspNetStudents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetTeacher", Storage="_AspNetTeachers", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetTeacher> AspNetTeachers
		{
			get
			{
				return this._AspNetTeachers;
			}
			set
			{
				this._AspNetTeachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserClaim", Storage="_AspNetUserClaims", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserClaim> AspNetUserClaims
		{
			get
			{
				return this._AspNetUserClaims;
			}
			set
			{
				this._AspNetUserClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserLogin", Storage="_AspNetUserLogins", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserLogin> AspNetUserLogins
		{
			get
			{
				return this._AspNetUserLogins;
			}
			set
			{
				this._AspNetUserLogins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserRole", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetStatus_AspNetUser", Storage="_AspNetStatus", ThisKey="StatusId", OtherKey="Id", IsForeignKey=true)]
		public AspNetStatus AspNetStatus
		{
			get
			{
				return this._AspNetStatus.Entity;
			}
			set
			{
				AspNetStatus previousValue = this._AspNetStatus.Entity;
				if (((previousValue != value) 
							|| (this._AspNetStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetStatus.Entity = null;
						previousValue.AspNetUsers.Remove(this);
					}
					this._AspNetStatus.Entity = value;
					if ((value != null))
					{
						value.AspNetUsers.Add(this);
						this._StatusId = value.Id;
					}
					else
					{
						this._StatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AspNetStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetAccountants(AspNetAccountant entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetAccountants(AspNetAccountant entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetBranch_Admins(AspNetBranch_Admin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetBranch_Admins(AspNetBranch_Admin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetBranches(AspNetBranch entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetBranches(AspNetBranch entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetDepartments(AspNetDepartment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetDepartments(AspNetDepartment entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetLogs(AspNetLog entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetLogs(AspNetLog entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetParents(AspNetParent entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetParents(AspNetParent entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetStudents(AspNetStudent entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetStudents(AspNetStudent entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetTeachers(AspNetTeacher entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetTeachers(AspNetTeacher entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserClaims(AspNetUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserClaims(AspNetUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserLogins(AspNetUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserLogins(AspNetUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
	}
}
#pragma warning restore 1591
